"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got";
exports.ids = ["vendor-chunks/got"];
exports.modules = {

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asPromise)\n/* harmony export */ });\n/* harmony import */ var node_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:events */ \"node:events\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var p_cancelable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-cancelable */ \"(rsc)/./node_modules/p-cancelable/index.js\");\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/index.js */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\n/* harmony import */ var _core_response_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _core_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/utils/proxy-events.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\n\n\n\n\n\n\n\n\nconst proxiedRequestEvents = [\n    'request',\n    'response',\n    'redirect',\n    'uploadProgress',\n    'downloadProgress',\n];\nfunction asPromise(firstRequest) {\n    let globalRequest;\n    let globalResponse;\n    let normalizedOptions;\n    const emitter = new node_events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    const promise = new p_cancelable__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((resolve, reject, onCancel) => {\n        onCancel(() => {\n            globalRequest.destroy();\n        });\n        onCancel.shouldReject = false;\n        onCancel(() => {\n            reject(new _types_js__WEBPACK_IMPORTED_MODULE_2__.CancelError(globalRequest));\n        });\n        const makeRequest = (retryCount) => {\n            // Errors when a new request is made after the promise settles.\n            // Used to detect a race condition.\n            // See https://github.com/sindresorhus/got/issues/1489\n            onCancel(() => { });\n            const request = firstRequest ?? new _core_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](undefined, undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            globalRequest = request;\n            request.once('response', async (response) => {\n                // Parse body\n                const contentEncoding = (response.headers['content-encoding'] ?? '').toLowerCase();\n                const isCompressed = contentEncoding === 'gzip' || contentEncoding === 'deflate' || contentEncoding === 'br';\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = response.rawBody;\n                }\n                else {\n                    try {\n                        response.body = (0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.parseBody)(response, options.responseType, options.parseJson, options.encoding);\n                    }\n                    catch (error) {\n                        // Fall back to `utf8`\n                        response.body = response.rawBody.toString();\n                        if ((0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.isResponseOk)(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    const hooks = options.hooks.afterResponse;\n                    for (const [index, hook] of hooks.entries()) {\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions) => {\n                            options.merge(updatedOptions);\n                            options.prefixUrl = '';\n                            if (updatedOptions.url) {\n                                options.url = updatedOptions.url;\n                            }\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            options.hooks.afterResponse = options.hooks.afterResponse.slice(0, index);\n                            throw new _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.RetryError(request);\n                        });\n                        if (!(_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__[\"default\"].object(response) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__[\"default\"].number(response.statusCode) && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__[\"default\"].nullOrUndefined(response.body))) {\n                            throw new TypeError('The `afterResponse` hook returned an invalid value');\n                        }\n                    }\n                }\n                catch (error) {\n                    request._beforeError(error);\n                    return;\n                }\n                globalResponse = response;\n                if (!(0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.isResponseOk)(response)) {\n                    request._beforeError(new _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.HTTPError(response));\n                    return;\n                }\n                request.destroy();\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error) => {\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    request.destroy();\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once('error', onError);\n            const previousBody = request.options?.body;\n            request.once('retry', (newRetryCount, error) => {\n                firstRequest = undefined;\n                const newBody = request.options.body;\n                if (previousBody === newBody && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__[\"default\"].nodeStream(newBody)) {\n                    error.message = 'Cannot retry with consumed body stream';\n                    onError(error);\n                    return;\n                }\n                // This is needed! We need to reuse `request.options` because they can get modified!\n                // For example, by calling `promise.json()`.\n                normalizedOptions = request.options;\n                makeRequest(newRetryCount);\n            });\n            (0,_core_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(request, emitter, proxiedRequestEvents);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__[\"default\"].undefined(firstRequest)) {\n                void request.flush();\n            }\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn) => {\n        emitter.on(event, fn);\n        return promise;\n    };\n    promise.off = (event, fn) => {\n        emitter.off(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType) => {\n        const newPromise = (async () => {\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return (0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.parseBody)(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = () => {\n        if (globalRequest.options) {\n            const { headers } = globalRequest.options;\n            if (!globalRequest.writableFinished && !('accept' in headers)) {\n                headers.accept = 'application/json';\n            }\n        }\n        return shortcut('json');\n    };\n    promise.buffer = () => shortcut('buffer');\n    promise.text = () => shortcut('text');\n    return promise;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelError: () => (/* binding */ CancelError)\n/* harmony export */ });\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/\nclass CancelError extends _core_errors_js__WEBPACK_IMPORTED_MODULE_0__.RequestError {\n    constructor(request) {\n        super('Promise was canceled', {}, request);\n        this.name = 'CancelError';\n        this.code = 'ERR_CANCELED';\n    }\n    /**\n    Whether the promise is canceled.\n    */\n    get isCanceled() {\n        return true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ08sMEJBQTBCLHlEQUFZO0FBQzdDO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanM/ZmJlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0RXJyb3IgfSBmcm9tICcuLi9jb3JlL2Vycm9ycy5qcyc7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IGlzIGFib3J0ZWQgd2l0aCBgLmNhbmNlbCgpYC5cbiovXG5leHBvcnQgY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBSZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJywge30sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0NBTkNFTEVEJztcbiAgICB9XG4gICAgLyoqXG4gICAgV2hldGhlciB0aGUgcHJvbWlzZSBpcyBjYW5jZWxlZC5cbiAgICAqL1xuICAgIGdldCBpc0NhbmNlbGVkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter, computedValue, }) => {\n    if (error.name === 'RetryError') {\n        return 1;\n    }\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            // In this case `computedValue` is `options.request.timeout`\n            if (retryAfter > computedValue) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * retryOptions.noise;\n    return Math.min(((2 ** (attemptCount - 1)) * 1000), retryOptions.backoffLimit) + noise;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calculateRetryDelay);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwrQkFBK0IsK0RBQStEO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzPzhkM2UiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2FsY3VsYXRlUmV0cnlEZWxheSA9ICh7IGF0dGVtcHRDb3VudCwgcmV0cnlPcHRpb25zLCBlcnJvciwgcmV0cnlBZnRlciwgY29tcHV0ZWRWYWx1ZSwgfSkgPT4ge1xuICAgIGlmIChlcnJvci5uYW1lID09PSAnUmV0cnlFcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChhdHRlbXB0Q291bnQgPiByZXRyeU9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGhhc01ldGhvZCA9IHJldHJ5T3B0aW9ucy5tZXRob2RzLmluY2x1ZGVzKGVycm9yLm9wdGlvbnMubWV0aG9kKTtcbiAgICBjb25zdCBoYXNFcnJvckNvZGUgPSByZXRyeU9wdGlvbnMuZXJyb3JDb2Rlcy5pbmNsdWRlcyhlcnJvci5jb2RlKTtcbiAgICBjb25zdCBoYXNTdGF0dXNDb2RlID0gZXJyb3IucmVzcG9uc2UgJiYgcmV0cnlPcHRpb25zLnN0YXR1c0NvZGVzLmluY2x1ZGVzKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgIGlmICghaGFzTWV0aG9kIHx8ICghaGFzRXJyb3JDb2RlICYmICFoYXNTdGF0dXNDb2RlKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgYGNvbXB1dGVkVmFsdWVgIGlzIGBvcHRpb25zLnJlcXVlc3QudGltZW91dGBcbiAgICAgICAgICAgIGlmIChyZXRyeUFmdGVyID4gY29tcHV0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQxMykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9pc2UgPSBNYXRoLnJhbmRvbSgpICogcmV0cnlPcHRpb25zLm5vaXNlO1xuICAgIHJldHVybiBNYXRoLm1pbigoKDIgKiogKGF0dGVtcHRDb3VudCAtIDEpKSAqIDEwMDApLCByZXRyeU9wdGlvbnMuYmFja29mZkxpbWl0KSArIG5vaXNlO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNhbGN1bGF0ZVJldHJ5RGVsYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/got/dist/source/core/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   HTTPError: () => (/* binding */ HTTPError),\n/* harmony export */   MaxRedirectsError: () => (/* binding */ MaxRedirectsError),\n/* harmony export */   ReadError: () => (/* binding */ ReadError),\n/* harmony export */   RequestError: () => (/* binding */ RequestError),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UploadError: () => (/* binding */ UploadError)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\n// A hacky check to prevent circular references.\nfunction isRequest(x) {\n    return _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].object(x) && '_onResponse' in x;\n}\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/\nclass RequestError extends Error {\n    constructor(message, error, self) {\n        super(message);\n        Object.defineProperty(this, \"input\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stack\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"request\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, this.constructor);\n        this.name = 'RequestError';\n        this.code = error.code ?? 'ERR_GOT_REQUEST_ERROR';\n        this.input = error.input;\n        if (isRequest(self)) {\n            Object.defineProperty(this, 'request', {\n                enumerable: false,\n                value: self,\n            });\n            Object.defineProperty(this, 'response', {\n                enumerable: false,\n                value: self.response,\n            });\n            this.options = self.options;\n        }\n        else {\n            this.options = self;\n        }\n        this.timings = this.request?.timings;\n        // Recover the original stacktrace\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(error.stack) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split('\\n').reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split('\\n').reverse();\n            // Remove duplicated traces\n            while (errorStackTrace.length > 0 && errorStackTrace[0] === thisStackTrace[0]) {\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join('\\n')}${errorStackTrace.reverse().join('\\n')}`;\n        }\n    }\n}\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/\nclass MaxRedirectsError extends RequestError {\n    constructor(request) {\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = 'MaxRedirectsError';\n        this.code = 'ERR_TOO_MANY_REDIRECTS';\n    }\n}\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass HTTPError extends RequestError {\n    constructor(response) {\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = 'HTTPError';\n        this.code = 'ERR_NON_2XX_3XX_RESPONSE';\n    }\n}\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/\nclass CacheError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'CacheError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_CACHE_ACCESS' : this.code;\n    }\n}\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/\nclass UploadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'UploadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_UPLOAD' : this.code;\n    }\n}\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/\nclass TimeoutError extends RequestError {\n    constructor(error, timings, request) {\n        super(error.message, error, request);\n        Object.defineProperty(this, \"timings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"event\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = 'TimeoutError';\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\n/**\nAn error to be thrown when reading from response stream fails.\n*/\nclass ReadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'ReadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_READING_RESPONSE_STREAM' : this.code;\n    }\n}\n/**\nAn error which always triggers a new retry when thrown.\n*/\nclass RetryError extends RequestError {\n    constructor(request) {\n        super('Retrying', {}, request);\n        this.name = 'RetryError';\n        this.code = 'ERR_RETRYING';\n    }\n}\n/**\nAn error to be thrown when the request is aborted by AbortController.\n*/\nclass AbortError extends RequestError {\n    constructor(request) {\n        super('This operation was aborted.', {}, request);\n        this.code = 'ERR_ABORTED';\n        this.name = 'AbortError';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/index.js":
/*!****************************************************!*\
  !*** ./node_modules/got/dist/source/core/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request)\n/* harmony export */ });\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var _szmarczak_http_timer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @szmarczak/http-timer */ \"(rsc)/./node_modules/@szmarczak/http-timer/dist/source/index.js\");\n/* harmony import */ var cacheable_request__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cacheable-request */ \"(rsc)/./node_modules/cacheable-request/dist/index.js\");\n/* harmony import */ var decompress_response__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! decompress-response */ \"(rsc)/./node_modules/decompress-response/index.js\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var get_stream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/get-stream/index.js\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/util/isFormData.js\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/FormDataEncoder.js\");\n/* harmony import */ var _utils_get_body_size_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/get-body-size.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\");\n/* harmony import */ var _utils_is_form_data_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is-form-data.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\n/* harmony import */ var _utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/proxy-events.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\n/* harmony import */ var _timed_out_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./timed-out.js */ \"(rsc)/./node_modules/got/dist/source/core/timed-out.js\");\n/* harmony import */ var _utils_url_to_options_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/url-to-options.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\");\n/* harmony import */ var _utils_weakable_map_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/weakable-map.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\");\n/* harmony import */ var _calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./calculate-retry-delay.js */ \"(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\");\n/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _utils_is_client_request_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/is-client-request.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js\");\n/* harmony import */ var _utils_is_unix_socket_url_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/is-unix-socket-url.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-unix-socket-url.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { buffer: getStreamAsBuffer } = get_stream__WEBPACK_IMPORTED_MODULE_7__;\nconst supportsBrotli = _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string(node_process__WEBPACK_IMPORTED_MODULE_0__.versions.brotli);\nconst methodsWithoutBody = new Set(['GET', 'HEAD']);\nconst cacheableStore = new _utils_weakable_map_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\nconst redirectCodes = new Set([300, 301, 302, 303, 304, 307, 308]);\nconst proxiedRequestEvents = [\n    'socket',\n    'connect',\n    'continue',\n    'information',\n    'upgrade',\n];\nconst noop = () => { };\nclass Request extends node_stream__WEBPACK_IMPORTED_MODULE_2__.Duplex {\n    constructor(url, options, defaults) {\n        super({\n            // Don't destroy immediately, as the error may be emitted on unsuccessful retry\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0,\n        });\n        // @ts-expect-error - Ignoring for now.\n        Object.defineProperty(this, 'constructor', {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_noPipe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/9568\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"redirectUrls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"retryCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_stopRetry\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_downloadedSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_uploadedSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_stopReading\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pipedServerResponses\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_request\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_responseSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_bodySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_unproxyEvents\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_isFromCache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_cannotHaveBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_triggerRead\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_cancelTimeouts\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_removeListeners\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nativeResponse\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_flushed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_aborted\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // We need this because `this._request` if `undefined` when using cache\n        Object.defineProperty(this, \"_requestInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._downloadedSize = 0;\n        this._uploadedSize = 0;\n        this._stopReading = false;\n        this._pipedServerResponses = new Set();\n        this._cannotHaveBody = false;\n        this._unproxyEvents = noop;\n        this._triggerRead = false;\n        this._cancelTimeouts = noop;\n        this._removeListeners = noop;\n        this._jobs = [];\n        this._flushed = false;\n        this._requestInitialized = false;\n        this._aborted = false;\n        this.redirectUrls = [];\n        this.retryCount = 0;\n        this._stopRetry = noop;\n        this.on('pipe', (source) => {\n            if (source?.headers) {\n                Object.assign(this.options.headers, source.headers);\n            }\n        });\n        this.on('newListener', event => {\n            if (event === 'retry' && this.listenerCount('retry') > 0) {\n                throw new Error('A retry listener has been attached already.');\n            }\n        });\n        try {\n            this.options = new _options_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](url, options, defaults);\n            if (!this.options.url) {\n                if (this.options.prefixUrl === '') {\n                    throw new TypeError('Missing `url` property');\n                }\n                this.options.url = '';\n            }\n            this.requestUrl = this.options.url;\n        }\n        catch (error) {\n            const { options } = error;\n            if (options) {\n                this.options = options;\n            }\n            this.flush = async () => {\n                this.flush = async () => { };\n                this.destroy(error);\n            };\n            return;\n        }\n        // Important! If you replace `body` in a handler with another stream, make sure it's readable first.\n        // The below is run only once.\n        const { body } = this.options;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nodeStream(body)) {\n            body.once('error', error => {\n                if (this._flushed) {\n                    this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.UploadError(error, this));\n                }\n                else {\n                    this.flush = async () => {\n                        this.flush = async () => { };\n                        this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.UploadError(error, this));\n                    };\n                }\n            });\n        }\n        if (this.options.signal) {\n            const abort = () => {\n                this.destroy(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.AbortError(this));\n            };\n            if (this.options.signal.aborted) {\n                abort();\n            }\n            else {\n                this.options.signal.addEventListener('abort', abort);\n                this._removeListeners = () => {\n                    this.options.signal?.removeEventListener('abort', abort);\n                };\n            }\n        }\n    }\n    async flush() {\n        if (this._flushed) {\n            return;\n        }\n        this._flushed = true;\n        try {\n            await this._finalizeBody();\n            if (this.destroyed) {\n                return;\n            }\n            await this._makeRequest();\n            if (this.destroyed) {\n                this._request?.destroy();\n                return;\n            }\n            // Queued writes etc.\n            for (const job of this._jobs) {\n                job();\n            }\n            // Prevent memory leak\n            this._jobs.length = 0;\n            this._requestInitialized = true;\n        }\n        catch (error) {\n            this._beforeError(error);\n        }\n    }\n    _beforeError(error) {\n        if (this._stopReading) {\n            return;\n        }\n        const { response, options } = this;\n        const attemptCount = this.retryCount + (error.name === 'RetryError' ? 0 : 1);\n        this._stopReading = true;\n        if (!(error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError)) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        void (async () => {\n            // Node.js parser is really weird.\n            // It emits post-request Parse Errors on the same instance as previous request. WTF.\n            // Therefore we need to check if it has been destroyed as well.\n            //\n            // Furthermore, Node.js 16 `response.destroy()` doesn't immediately destroy the socket,\n            // but makes the response unreadable. So we additionally need to check `response.readable`.\n            if (response?.readable && !response.rawBody && !this._request?.socket?.destroyed) {\n                // @types/node has incorrect typings. `setEncoding` accepts `null` as well.\n                response.setEncoding(this.readableEncoding);\n                const success = await this._setRawBody(response);\n                if (success) {\n                    response.body = response.rawBody.toString();\n                }\n            }\n            if (this.listenerCount('retry') !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && 'retry-after' in response.headers) {\n                        retryAfter = Number(response.headers['retry-after']);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers['retry-after']) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        }\n                        else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    const retryOptions = options.retry;\n                    backoff = await retryOptions.calculateDelay({\n                        attemptCount,\n                        retryOptions,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: (0,_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])({\n                            attemptCount,\n                            retryOptions,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: retryOptions.maxRetryAfter ?? options.timeout.request ?? Number.POSITIVE_INFINITY,\n                        }),\n                    });\n                }\n                catch (error_) {\n                    void this._error(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    await new Promise(resolve => {\n                        const timeout = setTimeout(resolve, backoff);\n                        this._stopRetry = () => {\n                            clearTimeout(timeout);\n                            resolve();\n                        };\n                    });\n                    // Something forced us to abort the retry\n                    if (this.destroyed) {\n                        return;\n                    }\n                    try {\n                        for (const hook of this.options.hooks.beforeRetry) {\n                            // eslint-disable-next-line no-await-in-loop\n                            await hook(typedError, this.retryCount + 1);\n                        }\n                    }\n                    catch (error_) {\n                        void this._error(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error_.message, error, this));\n                        return;\n                    }\n                    // Something forced us to abort the retry\n                    if (this.destroyed) {\n                        return;\n                    }\n                    this.destroy();\n                    this.emit('retry', this.retryCount + 1, error, (updatedOptions) => {\n                        const request = new Request(options.url, updatedOptions, options);\n                        request.retryCount = this.retryCount + 1;\n                        node_process__WEBPACK_IMPORTED_MODULE_0__.nextTick(() => {\n                            void request.flush();\n                        });\n                        return request;\n                    });\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this._triggerRead = true;\n        const { response } = this;\n        if (response && !this._stopReading) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this._triggerRead = false;\n            }\n            let data;\n            while ((data = response.read()) !== null) {\n                this._downloadedSize += data.length; // eslint-disable-line @typescript-eslint/restrict-plus-operands\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit('downloadProgress', progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    _write(chunk, encoding, callback) {\n        const write = () => {\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this._requestInitialized) {\n            write();\n        }\n        else {\n            this._jobs.push(write);\n        }\n    }\n    _final(callback) {\n        const endRequest = () => {\n            // We need to check if `this._request` is present,\n            // because it isn't when we use cache.\n            if (!this._request || this._request.destroyed) {\n                callback();\n                return;\n            }\n            this._request.end((error) => {\n                // The request has been destroyed before `_final` finished.\n                // See https://github.com/nodejs/node/issues/39356\n                if (this._request._writableState?.errored) {\n                    return;\n                }\n                if (!error) {\n                    this._bodySize = this._uploadedSize;\n                    this.emit('uploadProgress', this.uploadProgress);\n                    this._request.emit('upload-complete');\n                }\n                callback(error);\n            });\n        };\n        if (this._requestInitialized) {\n            endRequest();\n        }\n        else {\n            this._jobs.push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        this._stopReading = true;\n        this.flush = async () => { };\n        // Prevent further retries\n        this._stopRetry();\n        this._cancelTimeouts();\n        this._removeListeners();\n        if (this.options) {\n            const { body } = this.options;\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nodeStream(body)) {\n                body.destroy();\n            }\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        if (error !== null && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(error) && !(error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError)) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    pipe(destination, options) {\n        if (destination instanceof node_http__WEBPACK_IMPORTED_MODULE_3__.ServerResponse) {\n            this._pipedServerResponses.add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof node_http__WEBPACK_IMPORTED_MODULE_3__.ServerResponse) {\n            this._pipedServerResponses.delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(options.form);\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const isJSON = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(options.json);\n        const isBody = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(options.body);\n        const cannotHaveBody = methodsWithoutBody.has(options.method) && !(options.method === 'GET' && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (isForm || isJSON || isBody) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            // Serialize body\n            const noContentType = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string(headers['content-type']);\n            if (isBody) {\n                // Body is spec-compliant FormData\n                if ((0,form_data_encoder__WEBPACK_IMPORTED_MODULE_13__.isFormData)(options.body)) {\n                    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_14__.FormDataEncoder(options.body);\n                    if (noContentType) {\n                        headers['content-type'] = encoder.headers['Content-Type'];\n                    }\n                    if ('Content-Length' in encoder.headers) {\n                        headers['content-length'] = encoder.headers['Content-Length'];\n                    }\n                    options.body = encoder.encode();\n                }\n                // Special case for https://github.com/form-data/form-data\n                if ((0,_utils_is_form_data_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(options.body) && noContentType) {\n                    headers['content-type'] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                }\n            }\n            else if (isForm) {\n                if (noContentType) {\n                    headers['content-type'] = 'application/x-www-form-urlencoded';\n                }\n                const { form } = options;\n                options.form = undefined;\n                options.body = (new URLSearchParams(form)).toString();\n            }\n            else {\n                if (noContentType) {\n                    headers['content-type'] = 'application/json';\n                }\n                const { json } = options;\n                options.json = undefined;\n                options.body = options.stringifyJson(json);\n            }\n            const uploadBodySize = await (0,_utils_get_body_size_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(options.body, options.headers);\n            // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n            // A user agent SHOULD send a Content-Length in a request message when\n            // no Transfer-Encoding is sent and the request method defines a meaning\n            // for an enclosed payload body.  For example, a Content-Length header\n            // field is normally sent in a POST request even when the value is 0\n            // (indicating an empty payload body).  A user agent SHOULD NOT send a\n            // Content-Length header field when the request message does not contain\n            // a payload body and the method semantics do not anticipate such a\n            // body.\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(headers['content-length']) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(headers['transfer-encoding']) && !cannotHaveBody && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(uploadBodySize)) {\n                headers['content-length'] = String(uploadBodySize);\n            }\n        }\n        if (options.responseType === 'json' && !('accept' in options.headers)) {\n            options.headers.accept = 'application/json';\n        }\n        this._bodySize = Number(headers['content-length']) || undefined;\n    }\n    async _onResponseBase(response) {\n        // This will be called e.g. when using cache so we need to check if this request has been aborted.\n        if (this.isAborted) {\n            return;\n        }\n        const { options } = this;\n        const { url } = options;\n        this._nativeResponse = response;\n        if (options.decompress) {\n            response = decompress_response__WEBPACK_IMPORTED_MODULE_6__(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ?? node_http__WEBPACK_IMPORTED_MODULE_3__.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirectUrls;\n        typedResponse.request = this;\n        typedResponse.isFromCache = this._nativeResponse.fromCache ?? false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        typedResponse.ok = (0,_response_js__WEBPACK_IMPORTED_MODULE_17__.isResponseOk)(typedResponse);\n        this._isFromCache = typedResponse.isFromCache;\n        this._responseSize = Number(response.headers['content-length']) || undefined;\n        this.response = typedResponse;\n        response.once('end', () => {\n            this._responseSize = this._downloadedSize;\n            this.emit('downloadProgress', this.downloadProgress);\n        });\n        response.once('error', (error) => {\n            this._aborted = true;\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.ReadError(error, this));\n        });\n        response.once('aborted', () => {\n            this._aborted = true;\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.ReadError({\n                name: 'Error',\n                message: 'The server aborted pending request',\n                code: 'ECONNRESET',\n            }, this));\n        });\n        this.emit('downloadProgress', this.downloadProgress);\n        const rawCookies = response.headers['set-cookie'];\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie) => options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (promise) => {\n                    try {\n                        await promise;\n                    }\n                    catch { }\n                });\n            }\n            try {\n                await Promise.all(promises);\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        // The above is running a promise, therefore we need to check if this request has been aborted yet again.\n        if (this.isAborted) {\n            return;\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            this._cancelTimeouts();\n            this._unproxyEvents();\n            if (this.redirectUrls.length >= options.maxRedirects) {\n                this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.MaxRedirectsError(this));\n                return;\n            }\n            this._request = undefined;\n            const updatedOptions = new _options_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](undefined, undefined, this.options);\n            const serverRequestedGet = statusCode === 303 && updatedOptions.method !== 'GET' && updatedOptions.method !== 'HEAD';\n            const canRewrite = statusCode !== 307 && statusCode !== 308;\n            const userRequestedGet = updatedOptions.methodRewriting && canRewrite;\n            if (serverRequestedGet || userRequestedGet) {\n                updatedOptions.method = 'GET';\n                updatedOptions.body = undefined;\n                updatedOptions.json = undefined;\n                updatedOptions.form = undefined;\n                delete updatedOptions.headers['content-length'];\n            }\n            try {\n                // We need this in order to support UTF-8\n                const redirectBuffer = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(response.headers.location, 'binary').toString();\n                const redirectUrl = new URL(redirectBuffer, url);\n                if (!(0,_utils_is_unix_socket_url_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(url) && (0,_utils_is_unix_socket_url_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(redirectUrl)) {\n                    this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError('Cannot redirect to UNIX socket', {}, this));\n                    return;\n                }\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if ('host' in updatedOptions.headers) {\n                        delete updatedOptions.headers.host;\n                    }\n                    if ('cookie' in updatedOptions.headers) {\n                        delete updatedOptions.headers.cookie;\n                    }\n                    if ('authorization' in updatedOptions.headers) {\n                        delete updatedOptions.headers.authorization;\n                    }\n                    if (updatedOptions.username || updatedOptions.password) {\n                        updatedOptions.username = '';\n                        updatedOptions.password = '';\n                    }\n                }\n                else {\n                    redirectUrl.username = updatedOptions.username;\n                    redirectUrl.password = updatedOptions.password;\n                }\n                this.redirectUrls.push(redirectUrl);\n                updatedOptions.prefixUrl = '';\n                updatedOptions.url = redirectUrl;\n                for (const hook of updatedOptions.hooks.beforeRedirect) {\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(updatedOptions, typedResponse);\n                }\n                this.emit('redirect', updatedOptions, typedResponse);\n                this.options = updatedOptions;\n                await this._makeRequest();\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        // `HTTPError`s always have `error.response.body` defined.\n        // Therefore we cannot retry if `options.throwHttpErrors` is false.\n        // On the last retry, if `options.throwHttpErrors` is false, we would need to return the body,\n        // but that wouldn't be possible since the body would be already read in `error.response.body`.\n        if (options.isStream && options.throwHttpErrors && !(0,_response_js__WEBPACK_IMPORTED_MODULE_17__.isResponseOk)(typedResponse)) {\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_11__.HTTPError(typedResponse));\n            return;\n        }\n        response.on('readable', () => {\n            if (this._triggerRead) {\n                this._read();\n            }\n        });\n        this.on('resume', () => {\n            response.resume();\n        });\n        this.on('pause', () => {\n            response.pause();\n        });\n        response.once('end', () => {\n            this.push(null);\n        });\n        if (this._noPipe) {\n            const success = await this._setRawBody();\n            if (success) {\n                this.emit('response', response);\n            }\n            return;\n        }\n        this.emit('response', response);\n        for (const destination of this._pipedServerResponses) {\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for (const key in response.headers) {\n                const isAllowed = options.decompress ? key !== 'content-encoding' : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _setRawBody(from = this) {\n        if (from.readableEnded) {\n            return false;\n        }\n        try {\n            // Errors are emitted via the `error` event\n            const rawBody = await getStreamAsBuffer(from);\n            // TODO: Switch to this:\n            // let rawBody = await from.toArray();\n            // rawBody = Buffer.concat(rawBody);\n            // On retry Request is destroyed with no error, therefore the above will successfully resolve.\n            // So in order to check if this was really successfull, we need to check if it has been properly ended.\n            if (!this.isAborted) {\n                this.response.rawBody = rawBody;\n                return true;\n            }\n        }\n        catch { }\n        return false;\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        }\n        catch (error) {\n            /* istanbul ignore next: better safe than sorry */\n            this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        (0,_szmarczak_http_timer__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(request);\n        if (this.options.http2) {\n            // Unset stream timeout, as the `timeout` option was used only for connection timeout.\n            request.setTimeout(0);\n        }\n        this._cancelTimeouts = (0,_timed_out_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(request, timeout, url);\n        const responseEventName = options.cache ? 'cacheableResponse' : 'response';\n        request.once(responseEventName, (response) => {\n            void this._onResponse(response);\n        });\n        request.once('error', (error) => {\n            this._aborted = true;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            error = error instanceof _timed_out_js__WEBPACK_IMPORTED_MODULE_19__.TimeoutError ? new _errors_js__WEBPACK_IMPORTED_MODULE_11__.TimeoutError(error, this.timings, this) : new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this._unproxyEvents = (0,_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(request, this, proxiedRequestEvents);\n        this._request = request;\n        this.emit('uploadProgress', this.uploadProgress);\n        this._sendBody();\n        this.emit('request', request);\n    }\n    async _asyncWrite(chunk) {\n        return new Promise((resolve, reject) => {\n            super.write(chunk, error => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                resolve();\n            });\n        });\n    }\n    _sendBody() {\n        // Send body\n        const { body } = this.options;\n        const currentRequest = this.redirectUrls.length === 0 ? this : this._request ?? this;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nodeStream(body)) {\n            body.pipe(currentRequest);\n        }\n        else if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].generator(body) || _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].asyncGenerator(body)) {\n            (async () => {\n                try {\n                    for await (const chunk of body) {\n                        await this._asyncWrite(chunk);\n                    }\n                    super.end();\n                }\n                catch (error) {\n                    this._beforeError(error);\n                }\n            })();\n        }\n        else if (!_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(body)) {\n            this._writeRequest(body, undefined, () => { });\n            currentRequest.end();\n        }\n        else if (this._cannotHaveBody || this._noPipe) {\n            currentRequest.end();\n        }\n    }\n    _prepareCache(cache) {\n        if (!cacheableStore.has(cache)) {\n            const cacheableRequest = new cacheable_request__WEBPACK_IMPORTED_MODULE_5__[\"default\"](((requestOptions, handler) => {\n                const result = requestOptions._request(requestOptions, handler);\n                // TODO: remove this when `cacheable-request` supports async request functions.\n                if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].promise(result)) {\n                    // We only need to implement the error handler in order to support HTTP2 caching.\n                    // The result will be a promise anyway.\n                    // @ts-expect-error ignore\n                    result.once = (event, handler) => {\n                        if (event === 'error') {\n                            (async () => {\n                                try {\n                                    await result;\n                                }\n                                catch (error) {\n                                    handler(error);\n                                }\n                            })();\n                        }\n                        else if (event === 'abort') {\n                            // The empty catch is needed here in case when\n                            // it rejects before it's `await`ed in `_makeRequest`.\n                            (async () => {\n                                try {\n                                    const request = (await result);\n                                    request.once('abort', handler);\n                                }\n                                catch { }\n                            })();\n                        }\n                        else {\n                            /* istanbul ignore next: safety check */\n                            throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                        }\n                        return result;\n                    };\n                }\n                return result;\n            }), cache);\n            cacheableStore.set(cache, cacheableRequest.request());\n        }\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject) => {\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, (0,_utils_url_to_options_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(url));\n            let request;\n            // TODO: Fix `cacheable-response`. This is ugly.\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response) => {\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    const fix = () => {\n                        if (response.req) {\n                            response.complete = response.req.res.complete;\n                        }\n                    };\n                    response.prependOnceListener('end', fix);\n                    fix();\n                    (await request).emit('cacheableResponse', response);\n                }\n                resolve(response);\n            });\n            cacheRequest.once('error', reject);\n            cacheRequest.once('request', async (requestOrPromise) => {\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        const { options } = this;\n        const { headers, username, password } = options;\n        const cookieJar = options.cookieJar;\n        for (const key in headers) {\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            }\n            else if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(headers['accept-encoding'])) {\n            headers['accept-encoding'] = supportsBrotli ? 'gzip, deflate, br' : 'gzip, deflate';\n        }\n        if (username || password) {\n            const credentials = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(`${username}:${password}`).toString('base64');\n            headers.authorization = `Basic ${credentials}`;\n        }\n        // Set cookies\n        if (cookieJar) {\n            const cookieString = await cookieJar.getCookieString(options.url.toString());\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nonEmptyString(cookieString)) {\n                headers.cookie = cookieString;\n            }\n        }\n        // Reset `prefixUrl`\n        options.prefixUrl = '';\n        let request;\n        for (const hook of options.hooks.beforeRequest) {\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                request = () => result;\n                break;\n            }\n        }\n        if (!request) {\n            request = options.getRequestFunction();\n        }\n        const url = options.url;\n        this._requestOptions = options.createNativeRequestOptions();\n        if (options.cache) {\n            this._requestOptions._request = request;\n            this._requestOptions.cache = options.cache;\n            this._requestOptions.body = options.body;\n            this._prepareCache(options.cache);\n        }\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : request;\n        try {\n            // We can't do `await fn(...)`,\n            // because stream `error` event can be emitted before `Promise.resolve()`.\n            let requestOrResponse = fn(url, this._requestOptions);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].promise(requestOrResponse)) {\n                requestOrResponse = await requestOrResponse;\n            }\n            // Fallback\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined(requestOrResponse)) {\n                requestOrResponse = options.getFallbackRequestFunction()(url, this._requestOptions);\n                if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].promise(requestOrResponse)) {\n                    requestOrResponse = await requestOrResponse;\n                }\n            }\n            if ((0,_utils_is_client_request_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n            }\n            else if (this.writable) {\n                this.once('finish', () => {\n                    void this._onResponse(requestOrResponse);\n                });\n                this._sendBody();\n            }\n            else {\n                void this._onResponse(requestOrResponse);\n            }\n        }\n        catch (error) {\n            if (error instanceof cacheable_request__WEBPACK_IMPORTED_MODULE_5__.CacheError) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_11__.CacheError(error, this);\n            }\n            throw error;\n        }\n    }\n    async _error(error) {\n        try {\n            if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_11__.HTTPError && !this.options.throwHttpErrors) {\n                // This branch can be reached only when using the Promise API\n                // Skip calling the hooks on purpose.\n                // See https://github.com/sindresorhus/got/issues/2103\n            }\n            else {\n                for (const hook of this.options.hooks.beforeError) {\n                    // eslint-disable-next-line no-await-in-loop\n                    error = await hook(error);\n                }\n            }\n        }\n        catch (error_) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_11__.RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (!this._request || this._request.destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._request.write(chunk, encoding, (error) => {\n            // The `!destroyed` check is required to prevent `uploadProgress` being emitted after the stream was destroyed\n            if (!error && !this._request.destroyed) {\n                this._uploadedSize += node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.byteLength(chunk, encoding);\n                const progress = this.uploadProgress;\n                if (progress.percent < 1) {\n                    this.emit('uploadProgress', progress);\n                }\n            }\n            callback(error);\n        });\n    }\n    /**\n    The remote IP address.\n    */\n    get ip() {\n        return this.socket?.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */\n    get isAborted() {\n        return this._aborted;\n    }\n    get socket() {\n        return this._request?.socket ?? undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */\n    get downloadProgress() {\n        let percent;\n        if (this._responseSize) {\n            percent = this._downloadedSize / this._responseSize;\n        }\n        else if (this._responseSize === this._downloadedSize) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this._downloadedSize,\n            total: this._responseSize,\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */\n    get uploadProgress() {\n        let percent;\n        if (this._bodySize) {\n            percent = this._uploadedSize / this._bodySize;\n        }\n        else if (this._bodySize === this._uploadedSize) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this._uploadedSize,\n            total: this._bodySize,\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */\n    get timings() {\n        return this._request?.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */\n    get isFromCache() {\n        return this._isFromCache;\n    }\n    get reusedSocket() {\n        return this._request?.reusedSocket;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ0U7QUFDQTtBQUNZO0FBQ1A7QUFDK0M7QUFDcEM7QUFDbkI7QUFDQztBQUMrQztBQUMvQjtBQUNGO0FBQ0M7QUFDOEI7QUFDM0I7QUFDSDtBQUNXO0FBQzFCO0FBQ1U7QUFDYztBQUNDO0FBQzRFO0FBQ3hJLFFBQVEsNEJBQTRCLEVBQUUsdUNBQVM7QUFDL0MsdUJBQXVCLHdEQUFFLFFBQVEsa0RBQWdCO0FBQ2pEO0FBQ0EsMkJBQTJCLDhEQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLHNCQUFzQiwrQ0FBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsK0JBQStCLG9EQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixZQUFZLHdEQUFFO0FBQ2Q7QUFDQTtBQUNBLDBDQUEwQyxvREFBVztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxvREFBVztBQUN6RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtREFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBLCtCQUErQixxREFBWTtBQUMzQyx3QkFBd0IscURBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNFQUFtQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EseUNBQXlDLHFEQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHFEQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtEQUFnQjtBQUN4QztBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCLGdCQUFnQix3REFBRTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isd0RBQUUsd0NBQXdDLHFEQUFZO0FBQ3JGLHdCQUF3QixxREFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxREFBYztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFEQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCLHdCQUF3Qix3REFBRTtBQUMxQjtBQUNBLHdCQUF3Qix3REFBRTtBQUMxQix3QkFBd0Isd0RBQUU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZUFBZTtBQUM1RDtBQUNBO0FBQ0EsbUNBQW1DLHdEQUFFO0FBQ3JDO0FBQ0E7QUFDQSxvQkFBb0IsOERBQWM7QUFDbEMsd0NBQXdDLCtEQUFlO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtRUFBVTtBQUM5QixvRUFBb0UsV0FBVywyQkFBMkI7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsb0VBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdEQUFFLHlDQUF5Qyx3REFBRSxnRUFBZ0Usd0RBQUU7QUFDL0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0EsdUJBQXVCLGdEQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsbURBQWlCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFTO0FBQzNDLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFTO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFlBQVksd0RBQUU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMERBQWlCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxvREFBTztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsK0NBQU07QUFDN0M7QUFDQSxxQkFBcUIseUVBQWUsU0FBUyx5RUFBZTtBQUM1RCwwQ0FBMEMscURBQVkscUNBQXFDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDJEQUFZO0FBQ3hFLGtDQUFrQyxrREFBUztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixlQUFlO0FBQy9CLFFBQVEsaUVBQUs7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwwREFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQW9CLE9BQU8scURBQVksa0NBQWtDLHFEQUFZO0FBQzFIO0FBQ0EsU0FBUztBQUNULDhCQUE4QixtRUFBVztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxZQUFZLHdEQUFFO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQix3REFBRSxvQkFBb0Isd0RBQUU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxrQkFBa0Isd0RBQUU7QUFDcEIseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMseURBQWdCO0FBQ3pEO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQUU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxNQUFNO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFFQUFZO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBLGdCQUFnQix3REFBRTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQUU7QUFDdkIsNkZBQTZGLElBQUk7QUFDakc7QUFDQTtBQUNBLGtDQUFrQyx3REFBRTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsK0NBQU0sU0FBUyxTQUFTLEdBQUcsU0FBUztBQUNwRSw2Q0FBNkMsWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBRTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0RBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQUU7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdEQUFFO0FBQ2xCO0FBQ0Esb0JBQW9CLHdEQUFFO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3RUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlEQUFtQjtBQUNwRCwwQkFBMEIsbURBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFTO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxREFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLCtDQUFNO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmZtLWJvdC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9pbmRleC5qcz9mNmQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcm9jZXNzIGZyb20gJ25vZGU6cHJvY2Vzcyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdub2RlOmJ1ZmZlcic7XG5pbXBvcnQgeyBEdXBsZXggfSBmcm9tICdub2RlOnN0cmVhbSc7XG5pbXBvcnQgaHR0cCwgeyBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gJ25vZGU6aHR0cCc7XG5pbXBvcnQgdGltZXIgZnJvbSAnQHN6bWFyY3phay9odHRwLXRpbWVyJztcbmltcG9ydCBDYWNoZWFibGVSZXF1ZXN0LCB7IENhY2hlRXJyb3IgYXMgQ2FjaGVhYmxlQ2FjaGVFcnJvciwgfSBmcm9tICdjYWNoZWFibGUtcmVxdWVzdCc7XG5pbXBvcnQgZGVjb21wcmVzc1Jlc3BvbnNlIGZyb20gJ2RlY29tcHJlc3MtcmVzcG9uc2UnO1xuaW1wb3J0IGlzIGZyb20gJ0BzaW5kcmVzb3JodXMvaXMnO1xuaW1wb3J0IGdldFN0cmVhbSBmcm9tICdnZXQtc3RyZWFtJztcbmltcG9ydCB7IEZvcm1EYXRhRW5jb2RlciwgaXNGb3JtRGF0YSBhcyBpc0Zvcm1EYXRhTGlrZSB9IGZyb20gJ2Zvcm0tZGF0YS1lbmNvZGVyJztcbmltcG9ydCBnZXRCb2R5U2l6ZSBmcm9tICcuL3V0aWxzL2dldC1ib2R5LXNpemUuanMnO1xuaW1wb3J0IGlzRm9ybURhdGEgZnJvbSAnLi91dGlscy9pcy1mb3JtLWRhdGEuanMnO1xuaW1wb3J0IHByb3h5RXZlbnRzIGZyb20gJy4vdXRpbHMvcHJveHktZXZlbnRzLmpzJztcbmltcG9ydCB0aW1lZE91dCwgeyBUaW1lb3V0RXJyb3IgYXMgVGltZWRPdXRUaW1lb3V0RXJyb3IgfSBmcm9tICcuL3RpbWVkLW91dC5qcyc7XG5pbXBvcnQgdXJsVG9PcHRpb25zIGZyb20gJy4vdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMnO1xuaW1wb3J0IFdlYWthYmxlTWFwIGZyb20gJy4vdXRpbHMvd2Vha2FibGUtbWFwLmpzJztcbmltcG9ydCBjYWxjdWxhdGVSZXRyeURlbGF5IGZyb20gJy4vY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzJztcbmltcG9ydCBPcHRpb25zIGZyb20gJy4vb3B0aW9ucy5qcyc7XG5pbXBvcnQgeyBpc1Jlc3BvbnNlT2sgfSBmcm9tICcuL3Jlc3BvbnNlLmpzJztcbmltcG9ydCBpc0NsaWVudFJlcXVlc3QgZnJvbSAnLi91dGlscy9pcy1jbGllbnQtcmVxdWVzdC5qcyc7XG5pbXBvcnQgaXNVbml4U29ja2V0VVJMIGZyb20gJy4vdXRpbHMvaXMtdW5peC1zb2NrZXQtdXJsLmpzJztcbmltcG9ydCB7IFJlcXVlc3RFcnJvciwgUmVhZEVycm9yLCBNYXhSZWRpcmVjdHNFcnJvciwgSFRUUEVycm9yLCBUaW1lb3V0RXJyb3IsIFVwbG9hZEVycm9yLCBDYWNoZUVycm9yLCBBYm9ydEVycm9yLCB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmNvbnN0IHsgYnVmZmVyOiBnZXRTdHJlYW1Bc0J1ZmZlciB9ID0gZ2V0U3RyZWFtO1xuY29uc3Qgc3VwcG9ydHNCcm90bGkgPSBpcy5zdHJpbmcocHJvY2Vzcy52ZXJzaW9ucy5icm90bGkpO1xuY29uc3QgbWV0aG9kc1dpdGhvdXRCb2R5ID0gbmV3IFNldChbJ0dFVCcsICdIRUFEJ10pO1xuY29uc3QgY2FjaGVhYmxlU3RvcmUgPSBuZXcgV2Vha2FibGVNYXAoKTtcbmNvbnN0IHJlZGlyZWN0Q29kZXMgPSBuZXcgU2V0KFszMDAsIDMwMSwgMzAyLCAzMDMsIDMwNCwgMzA3LCAzMDhdKTtcbmNvbnN0IHByb3hpZWRSZXF1ZXN0RXZlbnRzID0gW1xuICAgICdzb2NrZXQnLFxuICAgICdjb25uZWN0JyxcbiAgICAnY29udGludWUnLFxuICAgICdpbmZvcm1hdGlvbicsXG4gICAgJ3VwZ3JhZGUnLFxuXTtcbmNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0IGV4dGVuZHMgRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIC8vIERvbid0IGRlc3Ryb3kgaW1tZWRpYXRlbHksIGFzIHRoZSBlcnJvciBtYXkgYmUgZW1pdHRlZCBvbiB1bnN1Y2Nlc3NmdWwgcmV0cnlcbiAgICAgICAgICAgIGF1dG9EZXN0cm95OiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEl0IG5lZWRzIHRvIGJlIHplcm8gYmVjYXVzZSB3ZSdyZSBqdXN0IHByb3h5aW5nIHRoZSBkYXRhIHRvIGFub3RoZXIgc3RyZWFtXG4gICAgICAgICAgICBoaWdoV2F0ZXJNYXJrOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIElnbm9yaW5nIGZvciBub3cuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29uc3RydWN0b3InLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbm9QaXBlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy85NTY4XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wdGlvbnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVzcG9uc2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVxdWVzdFVybFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZWRpcmVjdFVybHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0cnlDb3VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc3RvcFJldHJ5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9kb3dubG9hZGVkU2l6ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfdXBsb2FkZWRTaXplXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9wUmVhZGluZ1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcGlwZWRTZXJ2ZXJSZXNwb25zZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX3JlcXVlc3RcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX3Jlc3BvbnNlU2l6ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfYm9keVNpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX3VucHJveHlFdmVudHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2lzRnJvbUNhY2hlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9jYW5ub3RIYXZlQm9keVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfdHJpZ2dlclJlYWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2NhbmNlbFRpbWVvdXRzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9yZW1vdmVMaXN0ZW5lcnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX25hdGl2ZVJlc3BvbnNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9mbHVzaGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9hYm9ydGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIG5lZWQgdGhpcyBiZWNhdXNlIGB0aGlzLl9yZXF1ZXN0YCBpZiBgdW5kZWZpbmVkYCB3aGVuIHVzaW5nIGNhY2hlXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9yZXF1ZXN0SW5pdGlhbGl6ZWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZG93bmxvYWRlZFNpemUgPSAwO1xuICAgICAgICB0aGlzLl91cGxvYWRlZFNpemUgPSAwO1xuICAgICAgICB0aGlzLl9zdG9wUmVhZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9waXBlZFNlcnZlclJlc3BvbnNlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fY2Fubm90SGF2ZUJvZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdW5wcm94eUV2ZW50cyA9IG5vb3A7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJSZWFkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NhbmNlbFRpbWVvdXRzID0gbm9vcDtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5fam9icyA9IFtdO1xuICAgICAgICB0aGlzLl9mbHVzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hYm9ydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVkaXJlY3RVcmxzID0gW107XG4gICAgICAgIHRoaXMucmV0cnlDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3N0b3BSZXRyeSA9IG5vb3A7XG4gICAgICAgIHRoaXMub24oJ3BpcGUnLCAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc291cmNlPy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMuaGVhZGVycywgc291cmNlLmhlYWRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignbmV3TGlzdGVuZXInLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdyZXRyeScgJiYgdGhpcy5saXN0ZW5lckNvdW50KCdyZXRyeScpID4gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQSByZXRyeSBsaXN0ZW5lciBoYXMgYmVlbiBhdHRhY2hlZCBhbHJlYWR5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG5ldyBPcHRpb25zKHVybCwgb3B0aW9ucywgZGVmYXVsdHMpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXJsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmVmaXhVcmwgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgYHVybGAgcHJvcGVydHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVybCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VXJsID0gdGhpcy5vcHRpb25zLnVybDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gZXJyb3I7XG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZsdXNoID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZmx1c2ggPSBhc3luYyAoKSA9PiB7IH07XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KGVycm9yKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW1wb3J0YW50ISBJZiB5b3UgcmVwbGFjZSBgYm9keWAgaW4gYSBoYW5kbGVyIHdpdGggYW5vdGhlciBzdHJlYW0sIG1ha2Ugc3VyZSBpdCdzIHJlYWRhYmxlIGZpcnN0LlxuICAgICAgICAvLyBUaGUgYmVsb3cgaXMgcnVuIG9ubHkgb25jZS5cbiAgICAgICAgY29uc3QgeyBib2R5IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChpcy5ub2RlU3RyZWFtKGJvZHkpKSB7XG4gICAgICAgICAgICBib2R5Lm9uY2UoJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mbHVzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBVcGxvYWRFcnJvcihlcnJvciwgdGhpcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbHVzaCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2ggPSBhc3luYyAoKSA9PiB7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihuZXcgVXBsb2FkRXJyb3IoZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZ25hbCkge1xuICAgICAgICAgICAgY29uc3QgYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KG5ldyBBYm9ydEVycm9yKHRoaXMpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2lnbmFsPy5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGZsdXNoKCkge1xuICAgICAgICBpZiAodGhpcy5fZmx1c2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZsdXNoZWQgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZmluYWxpemVCb2R5KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdD8uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFF1ZXVlZCB3cml0ZXMgZXRjLlxuICAgICAgICAgICAgZm9yIChjb25zdCBqb2Igb2YgdGhpcy5fam9icykge1xuICAgICAgICAgICAgICAgIGpvYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJldmVudCBtZW1vcnkgbGVha1xuICAgICAgICAgICAgdGhpcy5fam9icy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdEluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYmVmb3JlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0b3BSZWFkaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyByZXNwb25zZSwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYXR0ZW1wdENvdW50ID0gdGhpcy5yZXRyeUNvdW50ICsgKGVycm9yLm5hbWUgPT09ICdSZXRyeUVycm9yJyA/IDAgOiAxKTtcbiAgICAgICAgdGhpcy5fc3RvcFJlYWRpbmcgPSB0cnVlO1xuICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcikpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICB2b2lkIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBOb2RlLmpzIHBhcnNlciBpcyByZWFsbHkgd2VpcmQuXG4gICAgICAgICAgICAvLyBJdCBlbWl0cyBwb3N0LXJlcXVlc3QgUGFyc2UgRXJyb3JzIG9uIHRoZSBzYW1lIGluc3RhbmNlIGFzIHByZXZpb3VzIHJlcXVlc3QuIFdURi5cbiAgICAgICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0IGhhcyBiZWVuIGRlc3Ryb3llZCBhcyB3ZWxsLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZ1cnRoZXJtb3JlLCBOb2RlLmpzIDE2IGByZXNwb25zZS5kZXN0cm95KClgIGRvZXNuJ3QgaW1tZWRpYXRlbHkgZGVzdHJveSB0aGUgc29ja2V0LFxuICAgICAgICAgICAgLy8gYnV0IG1ha2VzIHRoZSByZXNwb25zZSB1bnJlYWRhYmxlLiBTbyB3ZSBhZGRpdGlvbmFsbHkgbmVlZCB0byBjaGVjayBgcmVzcG9uc2UucmVhZGFibGVgLlxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlPy5yZWFkYWJsZSAmJiAhcmVzcG9uc2UucmF3Qm9keSAmJiAhdGhpcy5fcmVxdWVzdD8uc29ja2V0Py5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHlwZXMvbm9kZSBoYXMgaW5jb3JyZWN0IHR5cGluZ3MuIGBzZXRFbmNvZGluZ2AgYWNjZXB0cyBgbnVsbGAgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZyh0aGlzLnJlYWRhYmxlRW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCB0aGlzLl9zZXRSYXdCb2R5KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gcmVzcG9uc2UucmF3Qm9keS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ3JldHJ5JykgIT09IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFja29mZjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmV0cnlBZnRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmICdyZXRyeS1hZnRlcicgaW4gcmVzcG9uc2UuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlciA9IE51bWJlcihyZXNwb25zZS5oZWFkZXJzWydyZXRyeS1hZnRlciddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4ocmV0cnlBZnRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeUFmdGVyID0gRGF0ZS5wYXJzZShyZXNwb25zZS5oZWFkZXJzWydyZXRyeS1hZnRlciddKSAtIERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJ5QWZ0ZXIgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeUFmdGVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeUFmdGVyICo9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0cnlPcHRpb25zID0gb3B0aW9ucy5yZXRyeTtcbiAgICAgICAgICAgICAgICAgICAgYmFja29mZiA9IGF3YWl0IHJldHJ5T3B0aW9ucy5jYWxjdWxhdGVEZWxheSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRlbXB0Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHlwZWRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlOiBjYWxjdWxhdGVSZXRyeURlbGF5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRlbXB0Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB0eXBlZEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWRWYWx1ZTogcmV0cnlPcHRpb25zLm1heFJldHJ5QWZ0ZXIgPz8gb3B0aW9ucy50aW1lb3V0LnJlcXVlc3QgPz8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3JfKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5fZXJyb3IobmV3IFJlcXVlc3RFcnJvcihlcnJvcl8ubWVzc2FnZSwgZXJyb3JfLCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChyZXNvbHZlLCBiYWNrb2ZmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BSZXRyeSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBmb3JjZWQgdXMgdG8gYWJvcnQgdGhlIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5vcHRpb25zLmhvb2tzLmJlZm9yZVJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKHR5cGVkRXJyb3IsIHRoaXMucmV0cnlDb3VudCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5fZXJyb3IobmV3IFJlcXVlc3RFcnJvcihlcnJvcl8ubWVzc2FnZSwgZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgZm9yY2VkIHVzIHRvIGFib3J0IHRoZSByZXRyeVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdyZXRyeScsIHRoaXMucmV0cnlDb3VudCArIDEsIGVycm9yLCAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChvcHRpb25zLnVybCwgdXBkYXRlZE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUNvdW50ID0gdGhpcy5yZXRyeUNvdW50ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgcmVxdWVzdC5mbHVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2b2lkIHRoaXMuX2Vycm9yKHR5cGVkRXJyb3IpO1xuICAgICAgICB9KSgpO1xuICAgIH1cbiAgICBfcmVhZCgpIHtcbiAgICAgICAgdGhpcy5fdHJpZ2dlclJlYWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IHJlc3BvbnNlIH0gPSB0aGlzO1xuICAgICAgICBpZiAocmVzcG9uc2UgJiYgIXRoaXMuX3N0b3BSZWFkaW5nKSB7XG4gICAgICAgICAgICAvLyBXZSBjYW5ub3QgcHV0IHRoaXMgaW4gdGhlIGBpZmAgYWJvdmVcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgYC5yZWFkKClgIGFsc28gdHJpZ2dlcnMgdGhlIGBlbmRgIGV2ZW50XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVhZGFibGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyUmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICB3aGlsZSAoKGRhdGEgPSByZXNwb25zZS5yZWFkKCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bmxvYWRlZFNpemUgKz0gZGF0YS5sZW5ndGg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHNcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IHRoaXMuZG93bmxvYWRQcm9ncmVzcztcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MucGVyY2VudCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdkb3dubG9hZFByb2dyZXNzJywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgd3JpdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZVJlcXVlc3QoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0SW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHdyaXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9qb2JzLnB1c2god3JpdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9maW5hbChjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBlbmRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiBgdGhpcy5fcmVxdWVzdGAgaXMgcHJlc2VudCxcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQgaXNuJ3Qgd2hlbiB3ZSB1c2UgY2FjaGUuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlcXVlc3QgfHwgdGhpcy5fcmVxdWVzdC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QuZW5kKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IGhhcyBiZWVuIGRlc3Ryb3llZCBiZWZvcmUgYF9maW5hbGAgZmluaXNoZWQuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMzkzNTZcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdC5fd3JpdGFibGVTdGF0ZT8uZXJyb3JlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9keVNpemUgPSB0aGlzLl91cGxvYWRlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgndXBsb2FkUHJvZ3Jlc3MnLCB0aGlzLnVwbG9hZFByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5lbWl0KCd1cGxvYWQtY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0SW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGVuZFJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2pvYnMucHVzaChlbmRSZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVzdHJveShlcnJvciwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fc3RvcFJlYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmZsdXNoID0gYXN5bmMgKCkgPT4geyB9O1xuICAgICAgICAvLyBQcmV2ZW50IGZ1cnRoZXIgcmV0cmllc1xuICAgICAgICB0aGlzLl9zdG9wUmV0cnkoKTtcbiAgICAgICAgdGhpcy5fY2FuY2VsVGltZW91dHMoKTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYm9keSB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKGlzLm5vZGVTdHJlYW0oYm9keSkpIHtcbiAgICAgICAgICAgICAgICBib2R5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsICYmICFpcy51bmRlZmluZWQoZXJyb3IpICYmICEoZXJyb3IgaW5zdGFuY2VvZiBSZXF1ZXN0RXJyb3IpKSB7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gICAgcGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTZXJ2ZXJSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5fcGlwZWRTZXJ2ZXJSZXNwb25zZXMuYWRkKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIucGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHVucGlwZShkZXN0aW5hdGlvbikge1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTZXJ2ZXJSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5fcGlwZWRTZXJ2ZXJSZXNwb25zZXMuZGVsZXRlKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci51bnBpcGUoZGVzdGluYXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgX2ZpbmFsaXplQm9keSgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzRm9ybSA9ICFpcy51bmRlZmluZWQob3B0aW9ucy5mb3JtKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICBjb25zdCBpc0pTT04gPSAhaXMudW5kZWZpbmVkKG9wdGlvbnMuanNvbik7XG4gICAgICAgIGNvbnN0IGlzQm9keSA9ICFpcy51bmRlZmluZWQob3B0aW9ucy5ib2R5KTtcbiAgICAgICAgY29uc3QgY2Fubm90SGF2ZUJvZHkgPSBtZXRob2RzV2l0aG91dEJvZHkuaGFzKG9wdGlvbnMubWV0aG9kKSAmJiAhKG9wdGlvbnMubWV0aG9kID09PSAnR0VUJyAmJiBvcHRpb25zLmFsbG93R2V0Qm9keSk7XG4gICAgICAgIHRoaXMuX2Nhbm5vdEhhdmVCb2R5ID0gY2Fubm90SGF2ZUJvZHk7XG4gICAgICAgIGlmIChpc0Zvcm0gfHwgaXNKU09OIHx8IGlzQm9keSkge1xuICAgICAgICAgICAgaWYgKGNhbm5vdEhhdmVCb2R5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFxcYCR7b3B0aW9ucy5tZXRob2R9XFxgIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCB3aXRoIGEgYm9keWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2VyaWFsaXplIGJvZHlcbiAgICAgICAgICAgIGNvbnN0IG5vQ29udGVudFR5cGUgPSAhaXMuc3RyaW5nKGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKTtcbiAgICAgICAgICAgIGlmIChpc0JvZHkpIHtcbiAgICAgICAgICAgICAgICAvLyBCb2R5IGlzIHNwZWMtY29tcGxpYW50IEZvcm1EYXRhXG4gICAgICAgICAgICAgICAgaWYgKGlzRm9ybURhdGFMaWtlKG9wdGlvbnMuYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBGb3JtRGF0YUVuY29kZXIob3B0aW9ucy5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gZW5jb2Rlci5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoJ0NvbnRlbnQtTGVuZ3RoJyBpbiBlbmNvZGVyLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSBlbmNvZGVyLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ib2R5ID0gZW5jb2Rlci5lbmNvZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBodHRwczovL2dpdGh1Yi5jb20vZm9ybS1kYXRhL2Zvcm0tZGF0YVxuICAgICAgICAgICAgICAgIGlmIChpc0Zvcm1EYXRhKG9wdGlvbnMuYm9keSkgJiYgbm9Db250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke29wdGlvbnMuYm9keS5nZXRCb3VuZGFyeSgpfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNGb3JtKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmb3JtIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZm9ybSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmJvZHkgPSAobmV3IFVSTFNlYXJjaFBhcmFtcyhmb3JtKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChub0NvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGpzb24gfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5qc29uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9keSA9IG9wdGlvbnMuc3RyaW5naWZ5SnNvbihqc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVwbG9hZEJvZHlTaXplID0gYXdhaXQgZ2V0Qm9keVNpemUob3B0aW9ucy5ib2R5LCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4zLjJcbiAgICAgICAgICAgIC8vIEEgdXNlciBhZ2VudCBTSE9VTEQgc2VuZCBhIENvbnRlbnQtTGVuZ3RoIGluIGEgcmVxdWVzdCBtZXNzYWdlIHdoZW5cbiAgICAgICAgICAgIC8vIG5vIFRyYW5zZmVyLUVuY29kaW5nIGlzIHNlbnQgYW5kIHRoZSByZXF1ZXN0IG1ldGhvZCBkZWZpbmVzIGEgbWVhbmluZ1xuICAgICAgICAgICAgLy8gZm9yIGFuIGVuY2xvc2VkIHBheWxvYWQgYm9keS4gIEZvciBleGFtcGxlLCBhIENvbnRlbnQtTGVuZ3RoIGhlYWRlclxuICAgICAgICAgICAgLy8gZmllbGQgaXMgbm9ybWFsbHkgc2VudCBpbiBhIFBPU1QgcmVxdWVzdCBldmVuIHdoZW4gdGhlIHZhbHVlIGlzIDBcbiAgICAgICAgICAgIC8vIChpbmRpY2F0aW5nIGFuIGVtcHR5IHBheWxvYWQgYm9keSkuICBBIHVzZXIgYWdlbnQgU0hPVUxEIE5PVCBzZW5kIGFcbiAgICAgICAgICAgIC8vIENvbnRlbnQtTGVuZ3RoIGhlYWRlciBmaWVsZCB3aGVuIHRoZSByZXF1ZXN0IG1lc3NhZ2UgZG9lcyBub3QgY29udGFpblxuICAgICAgICAgICAgLy8gYSBwYXlsb2FkIGJvZHkgYW5kIHRoZSBtZXRob2Qgc2VtYW50aWNzIGRvIG5vdCBhbnRpY2lwYXRlIHN1Y2ggYVxuICAgICAgICAgICAgLy8gYm9keS5cbiAgICAgICAgICAgIGlmIChpcy51bmRlZmluZWQoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkgJiYgaXMudW5kZWZpbmVkKGhlYWRlcnNbJ3RyYW5zZmVyLWVuY29kaW5nJ10pICYmICFjYW5ub3RIYXZlQm9keSAmJiAhaXMudW5kZWZpbmVkKHVwbG9hZEJvZHlTaXplKSkge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSBTdHJpbmcodXBsb2FkQm9keVNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nICYmICEoJ2FjY2VwdCcgaW4gb3B0aW9ucy5oZWFkZXJzKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzLmFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ib2R5U2l6ZSA9IE51bWJlcihoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIF9vblJlc3BvbnNlQmFzZShyZXNwb25zZSkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIGUuZy4gd2hlbiB1c2luZyBjYWNoZSBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoaXMgcmVxdWVzdCBoYXMgYmVlbiBhYm9ydGVkLlxuICAgICAgICBpZiAodGhpcy5pc0Fib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgdXJsIH0gPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9uYXRpdmVSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAob3B0aW9ucy5kZWNvbXByZXNzKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGRlY29tcHJlc3NSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgICAgIGNvbnN0IHR5cGVkUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5zdGF0dXNNZXNzYWdlID0gdHlwZWRSZXNwb25zZS5zdGF0dXNNZXNzYWdlID8/IGh0dHAuU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLnVybCA9IG9wdGlvbnMudXJsLnRvU3RyaW5nKCk7XG4gICAgICAgIHR5cGVkUmVzcG9uc2UucmVxdWVzdFVybCA9IHRoaXMucmVxdWVzdFVybDtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZWRpcmVjdFVybHMgPSB0aGlzLnJlZGlyZWN0VXJscztcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZXF1ZXN0ID0gdGhpcztcbiAgICAgICAgdHlwZWRSZXNwb25zZS5pc0Zyb21DYWNoZSA9IHRoaXMuX25hdGl2ZVJlc3BvbnNlLmZyb21DYWNoZSA/PyBmYWxzZTtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5pcCA9IHRoaXMuaXA7XG4gICAgICAgIHR5cGVkUmVzcG9uc2UucmV0cnlDb3VudCA9IHRoaXMucmV0cnlDb3VudDtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5vayA9IGlzUmVzcG9uc2VPayh0eXBlZFJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5faXNGcm9tQ2FjaGUgPSB0eXBlZFJlc3BvbnNlLmlzRnJvbUNhY2hlO1xuICAgICAgICB0aGlzLl9yZXNwb25zZVNpemUgPSBOdW1iZXIocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkgfHwgdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gdHlwZWRSZXNwb25zZTtcbiAgICAgICAgcmVzcG9uc2Uub25jZSgnZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2VTaXplID0gdGhpcy5fZG93bmxvYWRlZFNpemU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Rvd25sb2FkUHJvZ3Jlc3MnLCB0aGlzLmRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzcG9uc2Uub25jZSgnZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2Fib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgLy8gRm9yY2UgY2xlYW4tdXAsIGJlY2F1c2Ugc29tZSBwYWNrYWdlcyBkb24ndCBkbyB0aGlzLlxuICAgICAgICAgICAgLy8gVE9ETzogRml4IGRlY29tcHJlc3MtcmVzcG9uc2VcbiAgICAgICAgICAgIHJlc3BvbnNlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBSZWFkRXJyb3IoZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3BvbnNlLm9uY2UoJ2Fib3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBSZWFkRXJyb3Ioe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdFcnJvcicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBzZXJ2ZXIgYWJvcnRlZCBwZW5kaW5nIHJlcXVlc3QnLFxuICAgICAgICAgICAgICAgIGNvZGU6ICdFQ09OTlJFU0VUJyxcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW1pdCgnZG93bmxvYWRQcm9ncmVzcycsIHRoaXMuZG93bmxvYWRQcm9ncmVzcyk7XG4gICAgICAgIGNvbnN0IHJhd0Nvb2tpZXMgPSByZXNwb25zZS5oZWFkZXJzWydzZXQtY29va2llJ107XG4gICAgICAgIGlmIChpcy5vYmplY3Qob3B0aW9ucy5jb29raWVKYXIpICYmIHJhd0Nvb2tpZXMpIHtcbiAgICAgICAgICAgIGxldCBwcm9taXNlcyA9IHJhd0Nvb2tpZXMubWFwKGFzeW5jIChyYXdDb29raWUpID0+IG9wdGlvbnMuY29va2llSmFyLnNldENvb2tpZShyYXdDb29raWUsIHVybC50b1N0cmluZygpKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZ25vcmVJbnZhbGlkQ29va2llcykge1xuICAgICAgICAgICAgICAgIHByb21pc2VzID0gcHJvbWlzZXMubWFwKGFzeW5jIChwcm9taXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIHsgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBhYm92ZSBpcyBydW5uaW5nIGEgcHJvbWlzZSwgdGhlcmVmb3JlIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhpcyByZXF1ZXN0IGhhcyBiZWVuIGFib3J0ZWQgeWV0IGFnYWluLlxuICAgICAgICBpZiAodGhpcy5pc0Fib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5mb2xsb3dSZWRpcmVjdCAmJiByZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uICYmIHJlZGlyZWN0Q29kZXMuaGFzKHN0YXR1c0NvZGUpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBiZWluZyByZWRpcmVjdGVkLCB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgIC8vIEl0J2QgYmUgYmVzdCB0byBhYm9ydCB0aGUgcmVxdWVzdCwgYnV0IHdlIGNhbid0IGJlY2F1c2VcbiAgICAgICAgICAgIC8vIHdlIHdvdWxkIGhhdmUgdG8gc2FjcmlmaWNlIHRoZSBUQ1AgY29ubmVjdGlvbi4gV2UgZG9uJ3Qgd2FudCB0aGF0LlxuICAgICAgICAgICAgcmVzcG9uc2UucmVzdW1lKCk7XG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxUaW1lb3V0cygpO1xuICAgICAgICAgICAgdGhpcy5fdW5wcm94eUV2ZW50cygpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVkaXJlY3RVcmxzLmxlbmd0aCA+PSBvcHRpb25zLm1heFJlZGlyZWN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBNYXhSZWRpcmVjdHNFcnJvcih0aGlzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0gbmV3IE9wdGlvbnModW5kZWZpbmVkLCB1bmRlZmluZWQsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJSZXF1ZXN0ZWRHZXQgPSBzdGF0dXNDb2RlID09PSAzMDMgJiYgdXBkYXRlZE9wdGlvbnMubWV0aG9kICE9PSAnR0VUJyAmJiB1cGRhdGVkT3B0aW9ucy5tZXRob2QgIT09ICdIRUFEJztcbiAgICAgICAgICAgIGNvbnN0IGNhblJld3JpdGUgPSBzdGF0dXNDb2RlICE9PSAzMDcgJiYgc3RhdHVzQ29kZSAhPT0gMzA4O1xuICAgICAgICAgICAgY29uc3QgdXNlclJlcXVlc3RlZEdldCA9IHVwZGF0ZWRPcHRpb25zLm1ldGhvZFJld3JpdGluZyAmJiBjYW5SZXdyaXRlO1xuICAgICAgICAgICAgaWYgKHNlcnZlclJlcXVlc3RlZEdldCB8fCB1c2VyUmVxdWVzdGVkR2V0KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlZE9wdGlvbnMubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICAgICAgdXBkYXRlZE9wdGlvbnMuYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB1cGRhdGVkT3B0aW9ucy5qc29uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRPcHRpb25zLmZvcm0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZWRPcHRpb25zLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBzdXBwb3J0IFVURi04XG4gICAgICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RCdWZmZXIgPSBCdWZmZXIuZnJvbShyZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uLCAnYmluYXJ5JykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWRpcmVjdFVybCA9IG5ldyBVUkwocmVkaXJlY3RCdWZmZXIsIHVybCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuaXhTb2NrZXRVUkwodXJsKSAmJiBpc1VuaXhTb2NrZXRVUkwocmVkaXJlY3RVcmwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBSZXF1ZXN0RXJyb3IoJ0Nhbm5vdCByZWRpcmVjdCB0byBVTklYIHNvY2tldCcsIHt9LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVkaXJlY3RpbmcgdG8gYSBkaWZmZXJlbnQgc2l0ZSwgY2xlYXIgc2Vuc2l0aXZlIGRhdGEuXG4gICAgICAgICAgICAgICAgaWYgKHJlZGlyZWN0VXJsLmhvc3RuYW1lICE9PSB1cmwuaG9zdG5hbWUgfHwgcmVkaXJlY3RVcmwucG9ydCAhPT0gdXJsLnBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdob3N0JyBpbiB1cGRhdGVkT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlZE9wdGlvbnMuaGVhZGVycy5ob3N0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgnY29va2llJyBpbiB1cGRhdGVkT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlZE9wdGlvbnMuaGVhZGVycy5jb29raWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdhdXRob3JpemF0aW9uJyBpbiB1cGRhdGVkT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlZE9wdGlvbnMuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkT3B0aW9ucy51c2VybmFtZSB8fCB1cGRhdGVkT3B0aW9ucy5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZE9wdGlvbnMudXNlcm5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRPcHRpb25zLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsLnVzZXJuYW1lID0gdXBkYXRlZE9wdGlvbnMudXNlcm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsLnBhc3N3b3JkID0gdXBkYXRlZE9wdGlvbnMucGFzc3dvcmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RVcmxzLnB1c2gocmVkaXJlY3RVcmwpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRPcHRpb25zLnByZWZpeFVybCA9ICcnO1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRPcHRpb25zLnVybCA9IHJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiB1cGRhdGVkT3B0aW9ucy5ob29rcy5iZWZvcmVSZWRpcmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKHVwZGF0ZWRPcHRpb25zLCB0eXBlZFJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdyZWRpcmVjdCcsIHVwZGF0ZWRPcHRpb25zLCB0eXBlZFJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB1cGRhdGVkT3B0aW9ucztcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBgSFRUUEVycm9yYHMgYWx3YXlzIGhhdmUgYGVycm9yLnJlc3BvbnNlLmJvZHlgIGRlZmluZWQuXG4gICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBjYW5ub3QgcmV0cnkgaWYgYG9wdGlvbnMudGhyb3dIdHRwRXJyb3JzYCBpcyBmYWxzZS5cbiAgICAgICAgLy8gT24gdGhlIGxhc3QgcmV0cnksIGlmIGBvcHRpb25zLnRocm93SHR0cEVycm9yc2AgaXMgZmFsc2UsIHdlIHdvdWxkIG5lZWQgdG8gcmV0dXJuIHRoZSBib2R5LFxuICAgICAgICAvLyBidXQgdGhhdCB3b3VsZG4ndCBiZSBwb3NzaWJsZSBzaW5jZSB0aGUgYm9keSB3b3VsZCBiZSBhbHJlYWR5IHJlYWQgaW4gYGVycm9yLnJlc3BvbnNlLmJvZHlgLlxuICAgICAgICBpZiAob3B0aW9ucy5pc1N0cmVhbSAmJiBvcHRpb25zLnRocm93SHR0cEVycm9ycyAmJiAhaXNSZXNwb25zZU9rKHR5cGVkUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihuZXcgSFRUUEVycm9yKHR5cGVkUmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNwb25zZS5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlclJlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdyZXN1bWUnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oJ3BhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UucGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3BvbnNlLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLl9ub1BpcGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCB0aGlzLl9zZXRSYXdCb2R5KCk7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdyZXNwb25zZScsIHJlc3BvbnNlKTtcbiAgICAgICAgZm9yIChjb25zdCBkZXN0aW5hdGlvbiBvZiB0aGlzLl9waXBlZFNlcnZlclJlc3BvbnNlcykge1xuICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLmhlYWRlcnNTZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZXNwb25zZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNBbGxvd2VkID0gb3B0aW9ucy5kZWNvbXByZXNzID8ga2V5ICE9PSAnY29udGVudC1lbmNvZGluZycgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzcG9uc2UuaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChpc0FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9zZXRSYXdCb2R5KGZyb20gPSB0aGlzKSB7XG4gICAgICAgIGlmIChmcm9tLnJlYWRhYmxlRW5kZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRXJyb3JzIGFyZSBlbWl0dGVkIHZpYSB0aGUgYGVycm9yYCBldmVudFxuICAgICAgICAgICAgY29uc3QgcmF3Qm9keSA9IGF3YWl0IGdldFN0cmVhbUFzQnVmZmVyKGZyb20pO1xuICAgICAgICAgICAgLy8gVE9ETzogU3dpdGNoIHRvIHRoaXM6XG4gICAgICAgICAgICAvLyBsZXQgcmF3Qm9keSA9IGF3YWl0IGZyb20udG9BcnJheSgpO1xuICAgICAgICAgICAgLy8gcmF3Qm9keSA9IEJ1ZmZlci5jb25jYXQocmF3Qm9keSk7XG4gICAgICAgICAgICAvLyBPbiByZXRyeSBSZXF1ZXN0IGlzIGRlc3Ryb3llZCB3aXRoIG5vIGVycm9yLCB0aGVyZWZvcmUgdGhlIGFib3ZlIHdpbGwgc3VjY2Vzc2Z1bGx5IHJlc29sdmUuXG4gICAgICAgICAgICAvLyBTbyBpbiBvcmRlciB0byBjaGVjayBpZiB0aGlzIHdhcyByZWFsbHkgc3VjY2Vzc2Z1bGwsIHdlIG5lZWQgdG8gY2hlY2sgaWYgaXQgaGFzIGJlZW4gcHJvcGVybHkgZW5kZWQuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZS5yYXdCb2R5ID0gcmF3Qm9keTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7IH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBfb25SZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fb25SZXNwb25zZUJhc2UocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGJldHRlciBzYWZlIHRoYW4gc29ycnkgKi9cbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25SZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHVybCB9ID0gb3B0aW9ucztcbiAgICAgICAgdGltZXIocmVxdWVzdCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaHR0cDIpIHtcbiAgICAgICAgICAgIC8vIFVuc2V0IHN0cmVhbSB0aW1lb3V0LCBhcyB0aGUgYHRpbWVvdXRgIG9wdGlvbiB3YXMgdXNlZCBvbmx5IGZvciBjb25uZWN0aW9uIHRpbWVvdXQuXG4gICAgICAgICAgICByZXF1ZXN0LnNldFRpbWVvdXQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FuY2VsVGltZW91dHMgPSB0aW1lZE91dChyZXF1ZXN0LCB0aW1lb3V0LCB1cmwpO1xuICAgICAgICBjb25zdCByZXNwb25zZUV2ZW50TmFtZSA9IG9wdGlvbnMuY2FjaGUgPyAnY2FjaGVhYmxlUmVzcG9uc2UnIDogJ3Jlc3BvbnNlJztcbiAgICAgICAgcmVxdWVzdC5vbmNlKHJlc3BvbnNlRXZlbnROYW1lLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fb25SZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIEZvcmNlIGNsZWFuLXVwLCBiZWNhdXNlIHNvbWUgcGFja2FnZXMgKGUuZy4gbm9jaykgZG9uJ3QgZG8gdGhpcy5cbiAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveSgpO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIFRpbWVkT3V0VGltZW91dEVycm9yID8gbmV3IFRpbWVvdXRFcnJvcihlcnJvciwgdGhpcy50aW1pbmdzLCB0aGlzKSA6IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdW5wcm94eUV2ZW50cyA9IHByb3h5RXZlbnRzKHJlcXVlc3QsIHRoaXMsIHByb3hpZWRSZXF1ZXN0RXZlbnRzKTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgIHRoaXMuZW1pdCgndXBsb2FkUHJvZ3Jlc3MnLCB0aGlzLnVwbG9hZFByb2dyZXNzKTtcbiAgICAgICAgdGhpcy5fc2VuZEJvZHkoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgcmVxdWVzdCk7XG4gICAgfVxuICAgIGFzeW5jIF9hc3luY1dyaXRlKGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBzdXBlci53cml0ZShjaHVuaywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NlbmRCb2R5KCkge1xuICAgICAgICAvLyBTZW5kIGJvZHlcbiAgICAgICAgY29uc3QgeyBib2R5IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRSZXF1ZXN0ID0gdGhpcy5yZWRpcmVjdFVybHMubGVuZ3RoID09PSAwID8gdGhpcyA6IHRoaXMuX3JlcXVlc3QgPz8gdGhpcztcbiAgICAgICAgaWYgKGlzLm5vZGVTdHJlYW0oYm9keSkpIHtcbiAgICAgICAgICAgIGJvZHkucGlwZShjdXJyZW50UmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXMuZ2VuZXJhdG9yKGJvZHkpIHx8IGlzLmFzeW5jR2VuZXJhdG9yKGJvZHkpKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgYm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fYXN5bmNXcml0ZShjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXMudW5kZWZpbmVkKGJvZHkpKSB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZVJlcXVlc3QoYm9keSwgdW5kZWZpbmVkLCAoKSA9PiB7IH0pO1xuICAgICAgICAgICAgY3VycmVudFJlcXVlc3QuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fY2Fubm90SGF2ZUJvZHkgfHwgdGhpcy5fbm9QaXBlKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVxdWVzdC5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJlcGFyZUNhY2hlKGNhY2hlKSB7XG4gICAgICAgIGlmICghY2FjaGVhYmxlU3RvcmUuaGFzKGNhY2hlKSkge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVhYmxlUmVxdWVzdCA9IG5ldyBDYWNoZWFibGVSZXF1ZXN0KCgocmVxdWVzdE9wdGlvbnMsIGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXF1ZXN0T3B0aW9ucy5fcmVxdWVzdChyZXF1ZXN0T3B0aW9ucywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgd2hlbiBgY2FjaGVhYmxlLXJlcXVlc3RgIHN1cHBvcnRzIGFzeW5jIHJlcXVlc3QgZnVuY3Rpb25zLlxuICAgICAgICAgICAgICAgIGlmIChpcy5wcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBuZWVkIHRvIGltcGxlbWVudCB0aGUgZXJyb3IgaGFuZGxlciBpbiBvcmRlciB0byBzdXBwb3J0IEhUVFAyIGNhY2hpbmcuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXN1bHQgd2lsbCBiZSBhIHByb21pc2UgYW55d2F5LlxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQub25jZSA9IChldmVudCwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50ID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVtcHR5IGNhdGNoIGlzIG5lZWRlZCBoZXJlIGluIGNhc2Ugd2hlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHJlamVjdHMgYmVmb3JlIGl0J3MgYGF3YWl0YGVkIGluIGBfbWFrZVJlcXVlc3RgLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gKGF3YWl0IHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Fib3J0JywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggeyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYWZldHkgY2hlY2sgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gSFRUUDIgcHJvbWlzZSBldmVudDogJHtldmVudH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KSwgY2FjaGUpO1xuICAgICAgICAgICAgY2FjaGVhYmxlU3RvcmUuc2V0KGNhY2hlLCBjYWNoZWFibGVSZXF1ZXN0LnJlcXVlc3QoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2NyZWF0ZUNhY2hlYWJsZVJlcXVlc3QodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgYHV0aWxzL3VybC10by1vcHRpb25zLnRzYCB3aGVuIGBjYWNoZWFibGUtcmVxdWVzdGAgaXMgZml4ZWRcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdXJsVG9PcHRpb25zKHVybCkpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3Q7XG4gICAgICAgICAgICAvLyBUT0RPOiBGaXggYGNhY2hlYWJsZS1yZXNwb25zZWAuIFRoaXMgaXMgdWdseS5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlUmVxdWVzdCA9IGNhY2hlYWJsZVN0b3JlLmdldChvcHRpb25zLmNhY2hlKShvcHRpb25zLCBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5fcmVhZGFibGVTdGF0ZS5hdXRvRGVzdHJveSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpeCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5jb21wbGV0ZSA9IHJlc3BvbnNlLnJlcS5yZXMuY29tcGxldGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnByZXBlbmRPbmNlTGlzdGVuZXIoJ2VuZCcsIGZpeCk7XG4gICAgICAgICAgICAgICAgICAgIGZpeCgpO1xuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgcmVxdWVzdCkuZW1pdCgnY2FjaGVhYmxlUmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWNoZVJlcXVlc3Qub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgICAgICAgY2FjaGVSZXF1ZXN0Lm9uY2UoJ3JlcXVlc3QnLCBhc3luYyAocmVxdWVzdE9yUHJvbWlzZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0T3JQcm9taXNlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9tYWtlUmVxdWVzdCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMsIHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgY29va2llSmFyID0gb3B0aW9ucy5jb29raWVKYXI7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpcy51bmRlZmluZWQoaGVhZGVyc1trZXldKSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXMubnVsbF8oaGVhZGVyc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVzZSBcXGB1bmRlZmluZWRcXGAgaW5zdGVhZCBvZiBcXGBudWxsXFxgIHRvIGRlbGV0ZSB0aGUgXFxgJHtrZXl9XFxgIGhlYWRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRlY29tcHJlc3MgJiYgaXMudW5kZWZpbmVkKGhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddKSkge1xuICAgICAgICAgICAgaGVhZGVyc1snYWNjZXB0LWVuY29kaW5nJ10gPSBzdXBwb3J0c0Jyb3RsaSA/ICdnemlwLCBkZWZsYXRlLCBicicgOiAnZ3ppcCwgZGVmbGF0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZXJuYW1lIHx8IHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IEJ1ZmZlci5mcm9tKGAke3VzZXJuYW1lfToke3Bhc3N3b3JkfWApLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgICAgIGhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IGBCYXNpYyAke2NyZWRlbnRpYWxzfWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGNvb2tpZXNcbiAgICAgICAgaWYgKGNvb2tpZUphcikge1xuICAgICAgICAgICAgY29uc3QgY29va2llU3RyaW5nID0gYXdhaXQgY29va2llSmFyLmdldENvb2tpZVN0cmluZyhvcHRpb25zLnVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChpcy5ub25FbXB0eVN0cmluZyhjb29raWVTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5jb29raWUgPSBjb29raWVTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXQgYHByZWZpeFVybGBcbiAgICAgICAgb3B0aW9ucy5wcmVmaXhVcmwgPSAnJztcbiAgICAgICAgbGV0IHJlcXVlc3Q7XG4gICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBvcHRpb25zLmhvb2tzLmJlZm9yZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBob29rKG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKCFpcy51bmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgU2tpcCB0aGUgdHlwZSBtaXNtYXRjaCB0byBzdXBwb3J0IGFic3RyYWN0IHJlc3BvbnNlc1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAoKSA9PiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gb3B0aW9ucy5nZXRSZXF1ZXN0RnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSBvcHRpb25zLnVybDtcbiAgICAgICAgdGhpcy5fcmVxdWVzdE9wdGlvbnMgPSBvcHRpb25zLmNyZWF0ZU5hdGl2ZVJlcXVlc3RPcHRpb25zKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0T3B0aW9ucy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0T3B0aW9ucy5jYWNoZSA9IG9wdGlvbnMuY2FjaGU7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0T3B0aW9ucy5ib2R5ID0gb3B0aW9ucy5ib2R5O1xuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZUNhY2hlKG9wdGlvbnMuY2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhY2hlIHN1cHBvcnRcbiAgICAgICAgY29uc3QgZm4gPSBvcHRpb25zLmNhY2hlID8gdGhpcy5fY3JlYXRlQ2FjaGVhYmxlUmVxdWVzdCA6IHJlcXVlc3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXZSBjYW4ndCBkbyBgYXdhaXQgZm4oLi4uKWAsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHN0cmVhbSBgZXJyb3JgIGV2ZW50IGNhbiBiZSBlbWl0dGVkIGJlZm9yZSBgUHJvbWlzZS5yZXNvbHZlKClgLlxuICAgICAgICAgICAgbGV0IHJlcXVlc3RPclJlc3BvbnNlID0gZm4odXJsLCB0aGlzLl9yZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaXMucHJvbWlzZShyZXF1ZXN0T3JSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3JSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RPclJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlmIChpcy51bmRlZmluZWQocmVxdWVzdE9yUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9yUmVzcG9uc2UgPSBvcHRpb25zLmdldEZhbGxiYWNrUmVxdWVzdEZ1bmN0aW9uKCkodXJsLCB0aGlzLl9yZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzLnByb21pc2UocmVxdWVzdE9yUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RPclJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdE9yUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ2xpZW50UmVxdWVzdChyZXF1ZXN0T3JSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblJlcXVlc3QocmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy53cml0YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25jZSgnZmluaXNoJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuX29uUmVzcG9uc2UocmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRCb2R5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2b2lkIHRoaXMuX29uUmVzcG9uc2UocmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FjaGVhYmxlQ2FjaGVFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDYWNoZUVycm9yKGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9lcnJvcihlcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSFRUUEVycm9yICYmICF0aGlzLm9wdGlvbnMudGhyb3dIdHRwRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBicmFuY2ggY2FuIGJlIHJlYWNoZWQgb25seSB3aGVuIHVzaW5nIHRoZSBQcm9taXNlIEFQSVxuICAgICAgICAgICAgICAgIC8vIFNraXAgY2FsbGluZyB0aGUgaG9va3Mgb24gcHVycG9zZS5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QvaXNzdWVzLzIxMDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiB0aGlzLm9wdGlvbnMuaG9va3MuYmVmb3JlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yXykge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgUmVxdWVzdEVycm9yKGVycm9yXy5tZXNzYWdlLCBlcnJvcl8sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdHJveShlcnJvcik7XG4gICAgfVxuICAgIF93cml0ZVJlcXVlc3QoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuX3JlcXVlc3QgfHwgdGhpcy5fcmVxdWVzdC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIC8vIFByb2JhYmx5IHRoZSBgQ2xpZW50UmVxdWVzdGAgaW5zdGFuY2Ugd2lsbCB0aHJvd1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlcXVlc3Qud3JpdGUoY2h1bmssIGVuY29kaW5nLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIC8vIFRoZSBgIWRlc3Ryb3llZGAgY2hlY2sgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBgdXBsb2FkUHJvZ3Jlc3NgIGJlaW5nIGVtaXR0ZWQgYWZ0ZXIgdGhlIHN0cmVhbSB3YXMgZGVzdHJveWVkXG4gICAgICAgICAgICBpZiAoIWVycm9yICYmICF0aGlzLl9yZXF1ZXN0LmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwbG9hZGVkU2l6ZSArPSBCdWZmZXIuYnl0ZUxlbmd0aChjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy51cGxvYWRQcm9ncmVzcztcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MucGVyY2VudCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGxvYWRQcm9ncmVzcycsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgcmVtb3RlIElQIGFkZHJlc3MuXG4gICAgKi9cbiAgICBnZXQgaXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvY2tldD8ucmVtb3RlQWRkcmVzcztcbiAgICB9XG4gICAgLyoqXG4gICAgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlcXVlc3QgaGFzIGJlZW4gYWJvcnRlZCBvciBub3QuXG4gICAgKi9cbiAgICBnZXQgaXNBYm9ydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWJvcnRlZDtcbiAgICB9XG4gICAgZ2V0IHNvY2tldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3Q/LnNvY2tldCA/PyB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFByb2dyZXNzIGV2ZW50IGZvciBkb3dubG9hZGluZyAocmVjZWl2aW5nIGEgcmVzcG9uc2UpLlxuICAgICovXG4gICAgZ2V0IGRvd25sb2FkUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGxldCBwZXJjZW50O1xuICAgICAgICBpZiAodGhpcy5fcmVzcG9uc2VTaXplKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gdGhpcy5fZG93bmxvYWRlZFNpemUgLyB0aGlzLl9yZXNwb25zZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcmVzcG9uc2VTaXplID09PSB0aGlzLl9kb3dubG9hZGVkU2l6ZSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGVyY2VudCxcbiAgICAgICAgICAgIHRyYW5zZmVycmVkOiB0aGlzLl9kb3dubG9hZGVkU2l6ZSxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzLl9yZXNwb25zZVNpemUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgIFByb2dyZXNzIGV2ZW50IGZvciB1cGxvYWRpbmcgKHNlbmRpbmcgYSByZXF1ZXN0KS5cbiAgICAqL1xuICAgIGdldCB1cGxvYWRQcm9ncmVzcygpIHtcbiAgICAgICAgbGV0IHBlcmNlbnQ7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5U2l6ZSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IHRoaXMuX3VwbG9hZGVkU2l6ZSAvIHRoaXMuX2JvZHlTaXplO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2JvZHlTaXplID09PSB0aGlzLl91cGxvYWRlZFNpemUpIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVyY2VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBlcmNlbnQsXG4gICAgICAgICAgICB0cmFuc2ZlcnJlZDogdGhpcy5fdXBsb2FkZWRTaXplLFxuICAgICAgICAgICAgdG90YWw6IHRoaXMuX2JvZHlTaXplLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgb2JqZWN0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblxuICAgIC0gYHN0YXJ0YCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBzdGFydGVkLlxuICAgIC0gYHNvY2tldGAgLSBUaW1lIHdoZW4gYSBzb2NrZXQgd2FzIGFzc2lnbmVkIHRvIHRoZSByZXF1ZXN0LlxuICAgIC0gYGxvb2t1cGAgLSBUaW1lIHdoZW4gdGhlIEROUyBsb29rdXAgZmluaXNoZWQuXG4gICAgLSBgY29ubmVjdGAgLSBUaW1lIHdoZW4gdGhlIHNvY2tldCBzdWNjZXNzZnVsbHkgY29ubmVjdGVkLlxuICAgIC0gYHNlY3VyZUNvbm5lY3RgIC0gVGltZSB3aGVuIHRoZSBzb2NrZXQgc2VjdXJlbHkgY29ubmVjdGVkLlxuICAgIC0gYHVwbG9hZGAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3QgZmluaXNoZWQgdXBsb2FkaW5nLlxuICAgIC0gYHJlc3BvbnNlYCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgcmVzcG9uc2VgIGV2ZW50LlxuICAgIC0gYGVuZGAgLSBUaW1lIHdoZW4gdGhlIHJlc3BvbnNlIGZpcmVkIGBlbmRgIGV2ZW50LlxuICAgIC0gYGVycm9yYCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgZXJyb3JgIGV2ZW50LlxuICAgIC0gYGFib3J0YCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgYWJvcnRgIGV2ZW50LlxuICAgIC0gYHBoYXNlc2BcbiAgICAgICAgLSBgd2FpdGAgLSBgdGltaW5ncy5zb2NrZXQgLSB0aW1pbmdzLnN0YXJ0YFxuICAgICAgICAtIGBkbnNgIC0gYHRpbWluZ3MubG9va3VwIC0gdGltaW5ncy5zb2NrZXRgXG4gICAgICAgIC0gYHRjcGAgLSBgdGltaW5ncy5jb25uZWN0IC0gdGltaW5ncy5sb29rdXBgXG4gICAgICAgIC0gYHRsc2AgLSBgdGltaW5ncy5zZWN1cmVDb25uZWN0IC0gdGltaW5ncy5jb25uZWN0YFxuICAgICAgICAtIGByZXF1ZXN0YCAtIGB0aW1pbmdzLnVwbG9hZCAtICh0aW1pbmdzLnNlY3VyZUNvbm5lY3QgfHwgdGltaW5ncy5jb25uZWN0KWBcbiAgICAgICAgLSBgZmlyc3RCeXRlYCAtIGB0aW1pbmdzLnJlc3BvbnNlIC0gdGltaW5ncy51cGxvYWRgXG4gICAgICAgIC0gYGRvd25sb2FkYCAtIGB0aW1pbmdzLmVuZCAtIHRpbWluZ3MucmVzcG9uc2VgXG4gICAgICAgIC0gYHRvdGFsYCAtIGAodGltaW5ncy5lbmQgfHwgdGltaW5ncy5lcnJvciB8fCB0aW1pbmdzLmFib3J0KSAtIHRpbWluZ3Muc3RhcnRgXG5cbiAgICBJZiBzb21ldGhpbmcgaGFzIG5vdCBiZWVuIG1lYXN1cmVkIHlldCwgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYC5cblxuICAgIF9fTm90ZV9fOiBUaGUgdGltZSBpcyBhIGBudW1iZXJgIHJlcHJlc2VudGluZyB0aGUgbWlsbGlzZWNvbmRzIGVsYXBzZWQgc2luY2UgdGhlIFVOSVggZXBvY2guXG4gICAgKi9cbiAgICBnZXQgdGltaW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3Q/LnRpbWluZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhlIHJlc3BvbnNlIHdhcyByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUuXG4gICAgKi9cbiAgICBnZXQgaXNGcm9tQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Zyb21DYWNoZTtcbiAgICB9XG4gICAgZ2V0IHJldXNlZFNvY2tldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3Q/LnJldXNlZFNvY2tldDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/options.js":
/*!******************************************************!*\
  !*** ./node_modules/got/dist/source/core/options.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Options)\n/* harmony export */ });\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_tls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:tls */ \"node:tls\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var lowercase_keys__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/lowercase-keys/index.js\");\n/* harmony import */ var cacheable_lookup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cacheable-lookup */ \"(rsc)/./node_modules/cacheable-lookup/source/index.js\");\n/* harmony import */ var http2_wrapper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! http2-wrapper */ \"(rsc)/./node_modules/http2-wrapper/source/index.js\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/util/isFormData.js\");\n/* harmony import */ var _parse_link_header_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse-link-header.js */ \"(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\");\n\n\n\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\n\n\n\n\n\n\n\n\nconst [major, minor] = node_process__WEBPACK_IMPORTED_MODULE_0__.versions.node.split('.').map(Number);\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].null_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n    }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = () => {\n    if (globalDnsCache) {\n        return globalDnsCache;\n    }\n    globalDnsCache = new cacheable_lookup__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n    return globalDnsCache;\n};\nconst defaultInternals = {\n    request: undefined,\n    agent: {\n        http: undefined,\n        https: undefined,\n        http2: undefined,\n    },\n    h2session: undefined,\n    decompress: true,\n    timeout: {\n        connect: undefined,\n        lookup: undefined,\n        read: undefined,\n        request: undefined,\n        response: undefined,\n        secureConnect: undefined,\n        send: undefined,\n        socket: undefined,\n    },\n    prefixUrl: '',\n    body: undefined,\n    form: undefined,\n    json: undefined,\n    cookieJar: undefined,\n    ignoreInvalidCookies: false,\n    searchParams: undefined,\n    dnsLookup: undefined,\n    dnsCache: undefined,\n    context: {},\n    hooks: {\n        init: [],\n        beforeRequest: [],\n        beforeError: [],\n        beforeRedirect: [],\n        beforeRetry: [],\n        afterResponse: [],\n    },\n    followRedirect: true,\n    maxRedirects: 10,\n    cache: undefined,\n    throwHttpErrors: true,\n    username: '',\n    password: '',\n    http2: false,\n    allowGetBody: false,\n    headers: {\n        'user-agent': 'got (https://github.com/sindresorhus/got)',\n    },\n    methodRewriting: false,\n    dnsLookupIpVersion: undefined,\n    parseJson: JSON.parse,\n    stringifyJson: JSON.stringify,\n    retry: {\n        limit: 2,\n        methods: [\n            'GET',\n            'PUT',\n            'HEAD',\n            'DELETE',\n            'OPTIONS',\n            'TRACE',\n        ],\n        statusCodes: [\n            408,\n            413,\n            429,\n            500,\n            502,\n            503,\n            504,\n            521,\n            522,\n            524,\n        ],\n        errorCodes: [\n            'ETIMEDOUT',\n            'ECONNRESET',\n            'EADDRINUSE',\n            'ECONNREFUSED',\n            'EPIPE',\n            'ENOTFOUND',\n            'ENETUNREACH',\n            'EAI_AGAIN',\n        ],\n        maxRetryAfter: undefined,\n        calculateDelay: ({ computedValue }) => computedValue,\n        backoffLimit: Number.POSITIVE_INFINITY,\n        noise: 100,\n    },\n    localAddress: undefined,\n    method: 'GET',\n    createConnection: undefined,\n    cacheOptions: {\n        shared: undefined,\n        cacheHeuristic: undefined,\n        immutableMinTimeToLive: undefined,\n        ignoreCargoCult: undefined,\n    },\n    https: {\n        alpnProtocols: undefined,\n        rejectUnauthorized: undefined,\n        checkServerIdentity: undefined,\n        certificateAuthority: undefined,\n        key: undefined,\n        certificate: undefined,\n        passphrase: undefined,\n        pfx: undefined,\n        ciphers: undefined,\n        honorCipherOrder: undefined,\n        minVersion: undefined,\n        maxVersion: undefined,\n        signatureAlgorithms: undefined,\n        tlsSessionLifetime: undefined,\n        dhparam: undefined,\n        ecdhCurve: undefined,\n        certificateRevocationLists: undefined,\n    },\n    encoding: undefined,\n    resolveBodyOnly: false,\n    isStream: false,\n    responseType: 'text',\n    url: undefined,\n    pagination: {\n        transform(response) {\n            if (response.request.options.responseType === 'json') {\n                return response.body;\n            }\n            return JSON.parse(response.body);\n        },\n        paginate({ response }) {\n            const rawLinkHeader = response.headers.link;\n            if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n                return false;\n            }\n            const parsed = (0,_parse_link_header_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(rawLinkHeader);\n            const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n            if (next) {\n                return {\n                    url: new URL(next.reference, response.url),\n                };\n            }\n            return false;\n        },\n        filter: () => true,\n        shouldContinue: () => true,\n        countLimit: Number.POSITIVE_INFINITY,\n        backoff: 0,\n        requestLimit: 10000,\n        stackAllItems: false,\n    },\n    setHost: true,\n    maxHeaderSize: undefined,\n    signal: undefined,\n    enableUnixSockets: false,\n};\nconst cloneInternals = (internals) => {\n    const { hooks, retry } = internals;\n    const result = {\n        ...internals,\n        context: { ...internals.context },\n        cacheOptions: { ...internals.cacheOptions },\n        https: { ...internals.https },\n        agent: { ...internals.agent },\n        headers: { ...internals.headers },\n        retry: {\n            ...retry,\n            errorCodes: [...retry.errorCodes],\n            methods: [...retry.methods],\n            statusCodes: [...retry.statusCodes],\n        },\n        timeout: { ...internals.timeout },\n        hooks: {\n            init: [...hooks.init],\n            beforeRequest: [...hooks.beforeRequest],\n            beforeError: [...hooks.beforeError],\n            beforeRedirect: [...hooks.beforeRedirect],\n            beforeRetry: [...hooks.beforeRetry],\n            afterResponse: [...hooks.afterResponse],\n        },\n        searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n        pagination: { ...internals.pagination },\n    };\n    if (result.url !== undefined) {\n        result.prefixUrl = '';\n    }\n    return result;\n};\nconst cloneRaw = (raw) => {\n    const { hooks, retry } = raw;\n    const result = { ...raw };\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.context)) {\n        result.context = { ...raw.context };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.cacheOptions)) {\n        result.cacheOptions = { ...raw.cacheOptions };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.https)) {\n        result.https = { ...raw.https };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.cacheOptions)) {\n        result.cacheOptions = { ...result.cacheOptions };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.agent)) {\n        result.agent = { ...raw.agent };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.headers)) {\n        result.headers = { ...raw.headers };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(retry)) {\n        result.retry = { ...retry };\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(retry.errorCodes)) {\n            result.retry.errorCodes = [...retry.errorCodes];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(retry.methods)) {\n            result.retry.methods = [...retry.methods];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(retry.statusCodes)) {\n            result.retry.statusCodes = [...retry.statusCodes];\n        }\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.timeout)) {\n        result.timeout = { ...raw.timeout };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(hooks)) {\n        result.hooks = {\n            ...hooks,\n        };\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.init)) {\n            result.hooks.init = [...hooks.init];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.beforeRequest)) {\n            result.hooks.beforeRequest = [...hooks.beforeRequest];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.beforeError)) {\n            result.hooks.beforeError = [...hooks.beforeError];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.beforeRedirect)) {\n            result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.beforeRetry)) {\n            result.hooks.beforeRetry = [...hooks.beforeRetry];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(hooks.afterResponse)) {\n            result.hooks.afterResponse = [...hooks.afterResponse];\n        }\n    }\n    // TODO: raw.searchParams\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object(raw.pagination)) {\n        result.pagination = { ...raw.pagination };\n    }\n    return result;\n};\nconst getHttp2TimeoutOption = (internals) => {\n    const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n    if (delays.length > 0) {\n        return Math.min(...delays);\n    }\n    return undefined;\n};\nconst init = (options, withOptions, self) => {\n    const initHooks = options.hooks?.init;\n    if (initHooks) {\n        for (const hook of initHooks) {\n            hook(withOptions, self);\n        }\n    }\n};\nclass Options {\n    constructor(input, options, defaults) {\n        Object.defineProperty(this, \"_unixOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_internals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_merging\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_init\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].urlInstance, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], input);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], options);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], defaults);\n        if (input instanceof Options || options instanceof Options) {\n            throw new TypeError('The defaults must be passed as the third argument');\n        }\n        this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n        this._init = [...(defaults?._init ?? [])];\n        this._merging = false;\n        this._unixOptions = undefined;\n        // This rule allows `finally` to be considered more important.\n        // Meaning no matter the error thrown in the `try` block,\n        // if `finally` throws then the `finally` error will be thrown.\n        //\n        // Yes, we want this. If we set `url` first, then the `url.searchParams`\n        // would get merged. Instead we set the `searchParams` first, then\n        // `url.searchParams` is overwritten as expected.\n        //\n        /* eslint-disable no-unsafe-finally */\n        try {\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].plainObject(input)) {\n                try {\n                    this.merge(input);\n                    this.merge(options);\n                }\n                finally {\n                    this.url = input.url;\n                }\n            }\n            else {\n                try {\n                    this.merge(options);\n                }\n                finally {\n                    if (options?.url !== undefined) {\n                        if (input === undefined) {\n                            this.url = options.url;\n                        }\n                        else {\n                            throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n                        }\n                    }\n                    else if (input !== undefined) {\n                        this.url = input;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            error.options = this;\n            throw error;\n        }\n        /* eslint-enable no-unsafe-finally */\n    }\n    merge(options) {\n        if (!options) {\n            return;\n        }\n        if (options instanceof Options) {\n            for (const init of options._init) {\n                this.merge(init);\n            }\n            return;\n        }\n        options = cloneRaw(options);\n        init(this, options, this);\n        init(options, options, this);\n        this._merging = true;\n        // Always merge `isStream` first\n        if ('isStream' in options) {\n            this.isStream = options.isStream;\n        }\n        try {\n            let push = false;\n            for (const key in options) {\n                // `got.extend()` options\n                if (key === 'mutableDefaults' || key === 'handlers') {\n                    continue;\n                }\n                // Never merge `url`\n                if (key === 'url') {\n                    continue;\n                }\n                if (!(key in this)) {\n                    throw new Error(`Unexpected option: ${key}`);\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                const value = options[key];\n                if (value === undefined) {\n                    continue;\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                this[key] = value;\n                push = true;\n            }\n            if (push) {\n                this._init.push(options);\n            }\n        }\n        finally {\n            this._merging = false;\n        }\n    }\n    /**\n    Custom request function.\n    The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n    @default http.request | https.request\n    */\n    get request() {\n        return this._internals.request;\n    }\n    set request(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].function_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.request = value;\n    }\n    /**\n    An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n    This is necessary because a request to one protocol might redirect to another.\n    In such a scenario, Got will switch over to the right protocol agent for you.\n\n    If a key is not present, it will default to a global agent.\n\n    @example\n    ```\n    import got from 'got';\n    import HttpAgent from 'agentkeepalive';\n\n    const {HttpsAgent} = HttpAgent;\n\n    await got('https://sindresorhus.com', {\n        agent: {\n            http: new HttpAgent(),\n            https: new HttpsAgent()\n        }\n    });\n    ```\n    */\n    get agent() {\n        return this._internals.agent;\n    }\n    set agent(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.agent)) {\n                throw new TypeError(`Unexpected agent option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.agent, value);\n        }\n        else {\n            this._internals.agent = { ...value };\n        }\n    }\n    get h2session() {\n        return this._internals.h2session;\n    }\n    set h2session(value) {\n        this._internals.h2session = value;\n    }\n    /**\n    Decompress the response automatically.\n\n    This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n\n    If this is disabled, a compressed response is returned as a `Buffer`.\n    This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n    @default true\n    */\n    get decompress() {\n        return this._internals.decompress;\n    }\n    set decompress(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.decompress = value;\n    }\n    /**\n    Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n    By default, there's no timeout.\n\n    This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n    - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n        Does not apply when using a Unix domain socket.\n    - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n    - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n    - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n    - `response` starts when the request has been written to the socket and ends when the response headers are received.\n    - `send` starts when the socket is connected and ends with the request has been written to the socket.\n    - `request` starts when the request is initiated and ends when the response's end event fires.\n    */\n    get timeout() {\n        // We always return `Delays` here.\n        // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.timeout;\n    }\n    set timeout(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.timeout)) {\n                throw new Error(`Unexpected timeout option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.timeout, value);\n        }\n        else {\n            this._internals.timeout = { ...value };\n        }\n    }\n    /**\n    When specified, `prefixUrl` will be prepended to `url`.\n    The prefix can be any valid URL, either relative or absolute.\n    A trailing slash `/` is optional - one will be added automatically.\n\n    __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n    __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n    For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n    The latter is used by browsers.\n\n    __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n\n    __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n    If the URL doesn't include it anymore, it will throw.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got('unicorn', {prefixUrl: 'https://cats.com'});\n    //=> 'https://cats.com/unicorn'\n\n    const instance = got.extend({\n        prefixUrl: 'https://google.com'\n    });\n\n    await instance('unicorn', {\n        hooks: {\n            beforeRequest: [\n                options => {\n                    options.prefixUrl = 'https://cats.com';\n                }\n            ]\n        }\n    });\n    //=> 'https://cats.com/unicorn'\n    ```\n    */\n    get prefixUrl() {\n        // We always return `string` here.\n        // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.prefixUrl;\n    }\n    set prefixUrl(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].urlInstance], value);\n        if (value === '') {\n            this._internals.prefixUrl = '';\n            return;\n        }\n        value = value.toString();\n        if (!value.endsWith('/')) {\n            value += '/';\n        }\n        if (this._internals.prefixUrl && this._internals.url) {\n            const { href } = this._internals.url;\n            this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n        }\n        this._internals.prefixUrl = value;\n    }\n    /**\n    __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n\n    __Note #2__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n    __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n\n    The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n    Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n    */\n    get body() {\n        return this._internals.body;\n    }\n    set body(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].buffer, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nodeStream, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].generator, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].asyncGenerator, form_data_encoder__WEBPACK_IMPORTED_MODULE_10__.isFormData, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nodeStream(value)) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.truthy(value.readable);\n        }\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.form);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.json);\n        }\n        this._internals.body = value;\n    }\n    /**\n    The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n    If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get form() {\n        return this._internals.form;\n    }\n    set form(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].plainObject, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.body);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.json);\n        }\n        this._internals.form = value;\n    }\n    /**\n    JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get json() {\n        return this._internals.json;\n    }\n    set json(value) {\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.body);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.undefined(this._internals.form);\n        }\n        this._internals.json = value;\n    }\n    /**\n    The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\n    Properties from `options` will override properties in the parsed `url`.\n\n    If no protocol is specified, it will throw a `TypeError`.\n\n    __Note__: The query string is **not** parsed as search params.\n\n    @example\n    ```\n    await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n    await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n\n    // The query string is overridden by `searchParams`\n    await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n    ```\n    */\n    get url() {\n        return this._internals.url;\n    }\n    set url(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].urlInstance, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (value === undefined) {\n            this._internals.url = undefined;\n            return;\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string(value) && value.startsWith('/')) {\n            throw new Error('`url` must not start with a slash');\n        }\n        const urlString = `${this.prefixUrl}${value.toString()}`;\n        const url = new URL(urlString);\n        this._internals.url = url;\n        if (url.protocol === 'unix:') {\n            url.href = `http://unix${url.pathname}${url.search}`;\n        }\n        if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n            const error = new Error(`Unsupported protocol: ${url.protocol}`);\n            error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n            throw error;\n        }\n        if (this._internals.username) {\n            url.username = this._internals.username;\n            this._internals.username = '';\n        }\n        if (this._internals.password) {\n            url.password = this._internals.password;\n            this._internals.password = '';\n        }\n        if (this._internals.searchParams) {\n            url.search = this._internals.searchParams.toString();\n            this._internals.searchParams = undefined;\n        }\n        if (url.hostname === 'unix') {\n            if (!this._internals.enableUnixSockets) {\n                throw new Error('Using UNIX domain sockets but option `enableUnixSockets` is not enabled');\n            }\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches?.groups) {\n                const { socketPath, path } = matches.groups;\n                this._unixOptions = {\n                    socketPath,\n                    path,\n                    host: '',\n                };\n            }\n            else {\n                this._unixOptions = undefined;\n            }\n            return;\n        }\n        this._unixOptions = undefined;\n    }\n    /**\n    Cookie support. You don't have to care about parsing or how to store them.\n\n    __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n    */\n    get cookieJar() {\n        return this._internals.cookieJar;\n    }\n    set cookieJar(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (value === undefined) {\n            this._internals.cookieJar = undefined;\n            return;\n        }\n        let { setCookie, getCookieString } = value;\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.function_(setCookie);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.function_(getCookieString);\n        /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n        if (setCookie.length === 4 && getCookieString.length === 0) {\n            setCookie = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(setCookie.bind(value));\n            getCookieString = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(getCookieString.bind(value));\n            this._internals.cookieJar = {\n                setCookie,\n                getCookieString: getCookieString,\n            };\n        }\n        else {\n            this._internals.cookieJar = value;\n        }\n    }\n    /**\n    You can abort the `request` using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n    @example\n    ```\n    import got from 'got';\n\n    const abortController = new AbortController();\n\n    const request = got('https://httpbin.org/anything', {\n        signal: abortController.signal\n    });\n\n    setTimeout(() => {\n        abortController.abort();\n    }, 100);\n    ```\n    */\n    get signal() {\n        return this._internals.signal;\n    }\n    set signal(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.object(value);\n        this._internals.signal = value;\n    }\n    /**\n    Ignore invalid cookies instead of throwing an error.\n    Only useful when the `cookieJar` option has been set. Not recommended.\n\n    @default false\n    */\n    get ignoreInvalidCookies() {\n        return this._internals.ignoreInvalidCookies;\n    }\n    set ignoreInvalidCookies(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.ignoreInvalidCookies = value;\n    }\n    /**\n    Query string that will be added to the request URL.\n    This will override the query string in `url`.\n\n    If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n\n    @example\n    ```\n    import got from 'got';\n\n    const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\n    await got('https://example.com', {searchParams});\n\n    console.log(searchParams.toString());\n    //=> 'key=a&key=b'\n    ```\n    */\n    get searchParams() {\n        if (this._internals.url) {\n            return this._internals.url.searchParams;\n        }\n        if (this._internals.searchParams === undefined) {\n            this._internals.searchParams = new URLSearchParams();\n        }\n        return this._internals.searchParams;\n    }\n    set searchParams(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        const url = this._internals.url;\n        if (value === undefined) {\n            this._internals.searchParams = undefined;\n            if (url) {\n                url.search = '';\n            }\n            return;\n        }\n        const searchParameters = this.searchParams;\n        let updated;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string(value)) {\n            updated = new URLSearchParams(value);\n        }\n        else if (value instanceof URLSearchParams) {\n            updated = value;\n        }\n        else {\n            validateSearchParameters(value);\n            updated = new URLSearchParams();\n            // eslint-disable-next-line guard-for-in\n            for (const key in value) {\n                const entry = value[key];\n                if (entry === null) {\n                    updated.append(key, '');\n                }\n                else if (entry === undefined) {\n                    searchParameters.delete(key);\n                }\n                else {\n                    updated.append(key, entry);\n                }\n            }\n        }\n        if (this._merging) {\n            // These keys will be replaced\n            for (const key of updated.keys()) {\n                searchParameters.delete(key);\n            }\n            for (const [key, value] of updated) {\n                searchParameters.append(key, value);\n            }\n        }\n        else if (url) {\n            url.search = searchParameters.toString();\n        }\n        else {\n            this._internals.searchParams = searchParameters;\n        }\n    }\n    get searchParameters() {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    set searchParameters(_value) {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    get dnsLookup() {\n        return this._internals.dnsLookup;\n    }\n    set dnsLookup(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].function_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.dnsLookup = value;\n    }\n    /**\n    An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n    Useful when making lots of requests to different *public* hostnames.\n\n    `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n\n    __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n\n    @default false\n    */\n    get dnsCache() {\n        return this._internals.dnsCache;\n    }\n    set dnsCache(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (value === true) {\n            this._internals.dnsCache = getGlobalDnsCache();\n        }\n        else if (value === false) {\n            this._internals.dnsCache = undefined;\n        }\n        else {\n            this._internals.dnsCache = value;\n        }\n    }\n    /**\n    User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n\n    @example\n    ```\n    import got from 'got';\n\n    const instance = got.extend({\n        hooks: {\n            beforeRequest: [\n                options => {\n                    if (!options.context || !options.context.token) {\n                        throw new Error('Token required');\n                    }\n\n                    options.headers.token = options.context.token;\n                }\n            ]\n        }\n    });\n\n    const context = {\n        token: 'secret'\n    };\n\n    const response = await instance('https://httpbin.org/headers', {context});\n\n    // Let's see the headers\n    console.log(response.body);\n    ```\n    */\n    get context() {\n        return this._internals.context;\n    }\n    set context(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.context, value);\n        }\n        else {\n            this._internals.context = { ...value };\n        }\n    }\n    /**\n    Hooks allow modifications during the request lifecycle.\n    Hook functions may be async and are run serially.\n    */\n    get hooks() {\n        return this._internals.hooks;\n    }\n    set hooks(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.object(value);\n        // eslint-disable-next-line guard-for-in\n        for (const knownHookEvent in value) {\n            if (!(knownHookEvent in this._internals.hooks)) {\n                throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n            }\n            const typedKnownHookEvent = knownHookEvent;\n            const hooks = value[typedKnownHookEvent];\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], hooks);\n            if (hooks) {\n                for (const hook of hooks) {\n                    _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.function_(hook);\n                }\n            }\n            if (this._merging) {\n                if (hooks) {\n                    // @ts-expect-error FIXME\n                    this._internals.hooks[typedKnownHookEvent].push(...hooks);\n                }\n            }\n            else {\n                if (!hooks) {\n                    throw new Error(`Missing hook event: ${knownHookEvent}`);\n                }\n                // @ts-expect-error FIXME\n                this._internals.hooks[knownHookEvent] = [...hooks];\n            }\n        }\n    }\n    /**\n    Defines if redirect responses should be followed automatically.\n\n    Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n    This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4). You can optionally turn on this behavior also for other redirect codes - see `methodRewriting`.\n\n    @default true\n    */\n    get followRedirect() {\n        return this._internals.followRedirect;\n    }\n    set followRedirect(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.followRedirect = value;\n    }\n    get followRedirects() {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    set followRedirects(_value) {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    /**\n    If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n    @default 10\n    */\n    get maxRedirects() {\n        return this._internals.maxRedirects;\n    }\n    set maxRedirects(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.number(value);\n        this._internals.maxRedirects = value;\n    }\n    /**\n    A cache adapter instance for storing cached response data.\n\n    @default false\n    */\n    get cache() {\n        return this._internals.cache;\n    }\n    set cache(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        if (value === true) {\n            this._internals.cache = globalCache;\n        }\n        else if (value === false) {\n            this._internals.cache = undefined;\n        }\n        else {\n            this._internals.cache = value;\n        }\n    }\n    /**\n    Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n\n    If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n    This may be useful if you are checking for resource availability and are expecting error responses.\n\n    @default true\n    */\n    get throwHttpErrors() {\n        return this._internals.throwHttpErrors;\n    }\n    set throwHttpErrors(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.throwHttpErrors = value;\n    }\n    get username() {\n        const url = this._internals.url;\n        const value = url ? url.username : this._internals.username;\n        return decodeURIComponent(value);\n    }\n    set username(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.username = fixedValue;\n        }\n        else {\n            this._internals.username = fixedValue;\n        }\n    }\n    get password() {\n        const url = this._internals.url;\n        const value = url ? url.password : this._internals.password;\n        return decodeURIComponent(value);\n    }\n    set password(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.password = fixedValue;\n        }\n        else {\n            this._internals.password = fixedValue;\n        }\n    }\n    /**\n    If set to `true`, Got will additionally accept HTTP2 requests.\n\n    It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n    __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n\n    __Note__: Overriding `options.request` will disable HTTP2 support.\n\n    @default false\n\n    @example\n    ```\n    import got from 'got';\n\n    const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\n    console.log(headers.via);\n    //=> '2 nghttpx'\n    ```\n    */\n    get http2() {\n        return this._internals.http2;\n    }\n    set http2(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.http2 = value;\n    }\n    /**\n    Set this to `true` to allow sending body for the `GET` method.\n    However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n    This option is only meant to interact with non-compliant servers when you have no other choice.\n\n    __Note__: The [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n\n    @default false\n    */\n    get allowGetBody() {\n        return this._internals.allowGetBody;\n    }\n    set allowGetBody(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.allowGetBody = value;\n    }\n    /**\n    Request headers.\n\n    Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n\n    @default {}\n    */\n    get headers() {\n        return this._internals.headers;\n    }\n    set headers(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        if (this._merging) {\n            Object.assign(this._internals.headers, (0,lowercase_keys__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(value));\n        }\n        else {\n            this._internals.headers = (0,lowercase_keys__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(value);\n        }\n    }\n    /**\n    Specifies if the HTTP request method should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4) on redirects.\n\n    As the [specification](https://tools.ietf.org/html/rfc7231#section-6.4) prefers to rewrite the HTTP method only on `303` responses, this is Got's default behavior.\n    Setting `methodRewriting` to `true` will also rewrite `301` and `302` responses, as allowed by the spec. This is the behavior followed by `curl` and browsers.\n\n    __Note__: Got never performs method rewriting on `307` and `308` responses, as this is [explicitly prohibited by the specification](https://www.rfc-editor.org/rfc/rfc7231#section-6.4.7).\n\n    @default false\n    */\n    get methodRewriting() {\n        return this._internals.methodRewriting;\n    }\n    set methodRewriting(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.methodRewriting = value;\n    }\n    /**\n    Indicates which DNS record family to use.\n\n    Values:\n    - `undefined`: IPv4 (if present) or IPv6\n    - `4`: Only IPv4\n    - `6`: Only IPv6\n\n    @default undefined\n    */\n    get dnsLookupIpVersion() {\n        return this._internals.dnsLookupIpVersion;\n    }\n    set dnsLookupIpVersion(value) {\n        if (value !== undefined && value !== 4 && value !== 6) {\n            throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n        }\n        this._internals.dnsLookupIpVersion = value;\n    }\n    /**\n    A function used to parse JSON responses.\n\n    @example\n    ```\n    import got from 'got';\n    import Bourne from '@hapi/bourne';\n\n    const parsed = await got('https://example.com', {\n        parseJson: text => Bourne.parse(text)\n    }).json();\n\n    console.log(parsed);\n    ```\n    */\n    get parseJson() {\n        return this._internals.parseJson;\n    }\n    set parseJson(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.function_(value);\n        this._internals.parseJson = value;\n    }\n    /**\n    A function used to stringify the body of JSON requests.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (key.startsWith('_')) {\n                return;\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            _ignoreMe: 1234\n        }\n    });\n    ```\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (typeof value === 'number') {\n                return value.toString();\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            number: 1\n        }\n    });\n    ```\n    */\n    get stringifyJson() {\n        return this._internals.stringifyJson;\n    }\n    set stringifyJson(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.function_(value);\n        this._internals.stringifyJson = value;\n    }\n    /**\n    An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n    Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\n    The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n    The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n\n    By default, it retries *only* on the specified methods, status codes, and on these network errors:\n\n    - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n    - `ECONNRESET`: Connection was forcibly closed by a peer.\n    - `EADDRINUSE`: Could not bind to any free port.\n    - `ECONNREFUSED`: Connection was refused by the server.\n    - `EPIPE`: The remote side of the stream being written has been closed.\n    - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n    - `ENETUNREACH`: No internet connection.\n    - `EAI_AGAIN`: DNS lookup timed out.\n\n    __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n    __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n    */\n    get retry() {\n        return this._internals.retry;\n    }\n    set retry(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].function_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.calculateDelay);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.maxRetryAfter);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.limit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.methods);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.statusCodes);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.errorCodes);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.noise);\n        if (value.noise && Math.abs(value.noise) > 100) {\n            throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n        }\n        for (const key in value) {\n            if (!(key in this._internals.retry)) {\n                throw new Error(`Unexpected retry option: ${key}`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.retry, value);\n        }\n        else {\n            this._internals.retry = { ...value };\n        }\n        const { retry } = this._internals;\n        retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n        retry.statusCodes = [...new Set(retry.statusCodes)];\n        retry.errorCodes = [...new Set(retry.errorCodes)];\n    }\n    /**\n    From `http.RequestOptions`.\n\n    The IP address used to send the request from.\n    */\n    get localAddress() {\n        return this._internals.localAddress;\n    }\n    set localAddress(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.localAddress = value;\n    }\n    /**\n    The HTTP method used to make the request.\n\n    @default 'GET'\n    */\n    get method() {\n        return this._internals.method;\n    }\n    set method(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.string(value);\n        this._internals.method = value.toUpperCase();\n    }\n    get createConnection() {\n        return this._internals.createConnection;\n    }\n    set createConnection(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].function_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.createConnection = value;\n    }\n    /**\n    From `http-cache-semantics`\n\n    @default {}\n    */\n    get cacheOptions() {\n        return this._internals.cacheOptions;\n    }\n    set cacheOptions(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.shared);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.cacheHeuristic);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.immutableMinTimeToLive);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.ignoreCargoCult);\n        for (const key in value) {\n            if (!(key in this._internals.cacheOptions)) {\n                throw new Error(`Cache option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.cacheOptions, value);\n        }\n        else {\n            this._internals.cacheOptions = { ...value };\n        }\n    }\n    /**\n    Options for the advanced HTTPS API.\n    */\n    get https() {\n        return this._internals.https;\n    }\n    set https(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.rejectUnauthorized);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].function_, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.checkServerIdentity);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.certificateAuthority);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.key);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].object, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.certificate);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.passphrase);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].buffer, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.pfx);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.alpnProtocols);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.ciphers);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].buffer, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.dhparam);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.signatureAlgorithms);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.minVersion);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.maxVersion);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].boolean, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.honorCipherOrder);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.tlsSessionLifetime);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.ecdhCurve);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].buffer, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value.certificateRevocationLists);\n        for (const key in value) {\n            if (!(key in this._internals.https)) {\n                throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.https, value);\n        }\n        else {\n            this._internals.https = { ...value };\n        }\n    }\n    /**\n    [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\n    To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n    Don't set this option to `null`.\n\n    __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n    @default 'utf-8'\n    */\n    get encoding() {\n        return this._internals.encoding;\n    }\n    set encoding(value) {\n        if (value === null) {\n            throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n        }\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].string, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.encoding = value;\n    }\n    /**\n    When set to `true` the promise will return the Response body instead of the Response object.\n\n    @default false\n    */\n    get resolveBodyOnly() {\n        return this._internals.resolveBodyOnly;\n    }\n    set resolveBodyOnly(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.resolveBodyOnly = value;\n    }\n    /**\n    Returns a `Stream` instead of a `Promise`.\n    This is equivalent to calling `got.stream(url, options?)`.\n\n    @default false\n    */\n    get isStream() {\n        return this._internals.isStream;\n    }\n    set isStream(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.isStream = value;\n    }\n    /**\n    The parsing method.\n\n    The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n\n    It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\n    __Note__: When using streams, this option is ignored.\n\n    @example\n    ```\n    const responsePromise = got(url);\n    const bufferPromise = responsePromise.buffer();\n    const jsonPromise = responsePromise.json();\n\n    const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n    // `response` is an instance of Got Response\n    // `buffer` is an instance of Buffer\n    // `json` is an object\n    ```\n\n    @example\n    ```\n    // This\n    const body = await got(url).json();\n\n    // is semantically the same as this\n    const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n    ```\n    */\n    get responseType() {\n        return this._internals.responseType;\n    }\n    set responseType(value) {\n        if (value === undefined) {\n            this._internals.responseType = 'text';\n            return;\n        }\n        if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n            throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n        }\n        this._internals.responseType = value;\n    }\n    get pagination() {\n        return this._internals.pagination;\n    }\n    set pagination(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.pagination, value);\n        }\n        else {\n            this._internals.pagination = value;\n        }\n    }\n    get auth() {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    set auth(_value) {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    get setHost() {\n        return this._internals.setHost;\n    }\n    set setHost(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.setHost = value;\n    }\n    get maxHeaderSize() {\n        return this._internals.maxHeaderSize;\n    }\n    set maxHeaderSize(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].number, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].undefined], value);\n        this._internals.maxHeaderSize = value;\n    }\n    get enableUnixSockets() {\n        return this._internals.enableUnixSockets;\n    }\n    set enableUnixSockets(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__.assert.boolean(value);\n        this._internals.enableUnixSockets = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    toJSON() {\n        return { ...this._internals };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n        return (0,node_util__WEBPACK_IMPORTED_MODULE_1__.inspect)(this._internals, options);\n    }\n    createNativeRequestOptions() {\n        const internals = this._internals;\n        const url = internals.url;\n        let agent;\n        if (url.protocol === 'https:') {\n            agent = internals.http2 ? internals.agent : internals.agent.https;\n        }\n        else {\n            agent = internals.agent.http;\n        }\n        const { https } = internals;\n        let { pfx } = https;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].array(pfx) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_8__[\"default\"].plainObject(pfx[0])) {\n            pfx = pfx.map(object => ({\n                buf: object.buffer,\n                passphrase: object.passphrase,\n            }));\n        }\n        return {\n            ...internals.cacheOptions,\n            ...this._unixOptions,\n            // HTTPS options\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            ALPNProtocols: https.alpnProtocols,\n            ca: https.certificateAuthority,\n            cert: https.certificate,\n            key: https.key,\n            passphrase: https.passphrase,\n            pfx: https.pfx,\n            rejectUnauthorized: https.rejectUnauthorized,\n            checkServerIdentity: https.checkServerIdentity ?? node_tls__WEBPACK_IMPORTED_MODULE_2__.checkServerIdentity,\n            ciphers: https.ciphers,\n            honorCipherOrder: https.honorCipherOrder,\n            minVersion: https.minVersion,\n            maxVersion: https.maxVersion,\n            sigalgs: https.signatureAlgorithms,\n            sessionTimeout: https.tlsSessionLifetime,\n            dhparam: https.dhparam,\n            ecdhCurve: https.ecdhCurve,\n            crl: https.certificateRevocationLists,\n            // HTTP options\n            lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n            family: internals.dnsLookupIpVersion,\n            agent,\n            setHost: internals.setHost,\n            method: internals.method,\n            maxHeaderSize: internals.maxHeaderSize,\n            localAddress: internals.localAddress,\n            headers: internals.headers,\n            createConnection: internals.createConnection,\n            timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n            // HTTP/2 options\n            h2session: internals.h2session,\n        };\n    }\n    getRequestFunction() {\n        const url = this._internals.url;\n        const { request } = this._internals;\n        if (!request && url) {\n            return this.getFallbackRequestFunction();\n        }\n        return request;\n    }\n    getFallbackRequestFunction() {\n        const url = this._internals.url;\n        if (!url) {\n            return;\n        }\n        if (url.protocol === 'https:') {\n            if (this._internals.http2) {\n                if (major < 15 || (major === 15 && minor < 10)) {\n                    const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n                    error.code = 'EUNSUPPORTED';\n                    throw error;\n                }\n                return http2_wrapper__WEBPACK_IMPORTED_MODULE_7__.auto;\n            }\n            return node_https__WEBPACK_IMPORTED_MODULE_4__.request;\n        }\n        return node_http__WEBPACK_IMPORTED_MODULE_3__.request;\n    }\n    freeze() {\n        const options = this._internals;\n        Object.freeze(options);\n        Object.freeze(options.hooks);\n        Object.freeze(options.hooks.afterResponse);\n        Object.freeze(options.hooks.beforeError);\n        Object.freeze(options.hooks.beforeRedirect);\n        Object.freeze(options.hooks.beforeRequest);\n        Object.freeze(options.hooks.beforeRetry);\n        Object.freeze(options.hooks.init);\n        Object.freeze(options.https);\n        Object.freeze(options.cacheOptions);\n        Object.freeze(options.agent);\n        Object.freeze(options.headers);\n        Object.freeze(options.timeout);\n        Object.freeze(options.retry);\n        Object.freeze(options.retry.errorCodes);\n        Object.freeze(options.retry.methods);\n        Object.freeze(options.retry.statusCodes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/parse-link-header.js":
/*!****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/parse-link-header.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ parseLinkHeader)\n/* harmony export */ });\nfunction parseLinkHeader(link) {\n    const parsed = [];\n    const items = link.split(',');\n    for (const item of items) {\n        // https://tools.ietf.org/html/rfc5988#section-5\n        const [rawUriReference, ...rawLinkParameters] = item.split(';');\n        const trimmedUriReference = rawUriReference.trim();\n        // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n        if (trimmedUriReference[0] !== '<' || trimmedUriReference[trimmedUriReference.length - 1] !== '>') {\n            throw new Error(`Invalid format of the Link header reference: ${trimmedUriReference}`);\n        }\n        const reference = trimmedUriReference.slice(1, -1);\n        const parameters = {};\n        if (rawLinkParameters.length === 0) {\n            throw new Error(`Unexpected end of Link header parameters: ${rawLinkParameters.join(';')}`);\n        }\n        for (const rawParameter of rawLinkParameters) {\n            const trimmedRawParameter = rawParameter.trim();\n            const center = trimmedRawParameter.indexOf('=');\n            if (center === -1) {\n                throw new Error(`Failed to parse Link header: ${link}`);\n            }\n            const name = trimmedRawParameter.slice(0, center).trim();\n            const value = trimmedRawParameter.slice(center + 1).trim();\n            parameters[name] = value;\n        }\n        parsed.push({\n            reference,\n            parameters,\n        });\n    }\n    return parsed;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvcGFyc2UtbGluay1oZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLG9CQUFvQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSx5QkFBeUIsR0FBRztBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLEtBQUs7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmZtLWJvdC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9wYXJzZS1saW5rLWhlYWRlci5qcz9kN2JlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlTGlua0hlYWRlcihsaW5rKSB7XG4gICAgY29uc3QgcGFyc2VkID0gW107XG4gICAgY29uc3QgaXRlbXMgPSBsaW5rLnNwbGl0KCcsJyk7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1OTg4I3NlY3Rpb24tNVxuICAgICAgICBjb25zdCBbcmF3VXJpUmVmZXJlbmNlLCAuLi5yYXdMaW5rUGFyYW1ldGVyc10gPSBpdGVtLnNwbGl0KCc7Jyk7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRVcmlSZWZlcmVuY2UgPSByYXdVcmlSZWZlcmVuY2UudHJpbSgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1zdHJpbmctc3RhcnRzLWVuZHMtd2l0aFxuICAgICAgICBpZiAodHJpbW1lZFVyaVJlZmVyZW5jZVswXSAhPT0gJzwnIHx8IHRyaW1tZWRVcmlSZWZlcmVuY2VbdHJpbW1lZFVyaVJlZmVyZW5jZS5sZW5ndGggLSAxXSAhPT0gJz4nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZm9ybWF0IG9mIHRoZSBMaW5rIGhlYWRlciByZWZlcmVuY2U6ICR7dHJpbW1lZFVyaVJlZmVyZW5jZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSB0cmltbWVkVXJpUmVmZXJlbmNlLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHt9O1xuICAgICAgICBpZiAocmF3TGlua1BhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZW5kIG9mIExpbmsgaGVhZGVyIHBhcmFtZXRlcnM6ICR7cmF3TGlua1BhcmFtZXRlcnMuam9pbignOycpfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcmF3UGFyYW1ldGVyIG9mIHJhd0xpbmtQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmltbWVkUmF3UGFyYW1ldGVyID0gcmF3UGFyYW1ldGVyLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuaW5kZXhPZignPScpO1xuICAgICAgICAgICAgaWYgKGNlbnRlciA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBMaW5rIGhlYWRlcjogJHtsaW5rfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuc2xpY2UoMCwgY2VudGVyKS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuc2xpY2UoY2VudGVyICsgMSkudHJpbSgpO1xuICAgICAgICAgICAgcGFyYW1ldGVyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5wdXNoKHtcbiAgICAgICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBhcmFtZXRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/response.js":
/*!*******************************************************!*\
  !*** ./node_modules/got/dist/source/core/response.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   isResponseOk: () => (/* binding */ isResponseOk),\n/* harmony export */   parseBody: () => (/* binding */ parseBody)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\nconst isResponseOk = (response) => {\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return (statusCode >= 200 && statusCode <= limitStatusCode) || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nclass ParseError extends _errors_js__WEBPACK_IMPORTED_MODULE_0__.RequestError {\n    constructor(error, response) {\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = 'ParseError';\n        this.code = 'ERR_BODY_PARSE_FAILURE';\n    }\n}\nconst parseBody = (response, responseType, parseJson, encoding) => {\n    const { rawBody } = response;\n    try {\n        if (responseType === 'text') {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === 'json') {\n            return rawBody.length === 0 ? '' : parseJson(rawBody.toString(encoding));\n        }\n        if (responseType === 'buffer') {\n            return rawBody;\n        }\n    }\n    catch (error) {\n        throw new ParseError(error, response);\n    }\n    throw new ParseError({\n        message: `Unknown body type '${responseType}'`,\n        name: 'Error',\n    }, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNwQztBQUNQLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlCQUF5QixvREFBWTtBQUM1QztBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGlCQUFpQixlQUFlLE1BQU0sdUJBQXVCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGFBQWE7QUFDcEQ7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmZtLWJvdC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9yZXNwb25zZS5qcz81ZDhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmV4cG9ydCBjb25zdCBpc1Jlc3BvbnNlT2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGxpbWl0U3RhdHVzQ29kZSA9IHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA/IDI5OSA6IDM5OTtcbiAgICByZXR1cm4gKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gbGltaXRTdGF0dXNDb2RlKSB8fCBzdGF0dXNDb2RlID09PSAzMDQ7XG59O1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiBzZXJ2ZXIgcmVzcG9uc2UgY29kZSBpcyAyeHgsIGFuZCBwYXJzaW5nIGJvZHkgZmFpbHMuXG5JbmNsdWRlcyBhIGByZXNwb25zZWAgcHJvcGVydHkuXG4qL1xuZXhwb3J0IGNsYXNzIFBhcnNlRXJyb3IgZXh0ZW5kcyBSZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9yLCByZXNwb25zZSkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHJlc3BvbnNlLnJlcXVlc3Q7XG4gICAgICAgIHN1cGVyKGAke2Vycm9yLm1lc3NhZ2V9IGluIFwiJHtvcHRpb25zLnVybC50b1N0cmluZygpfVwiYCwgZXJyb3IsIHJlc3BvbnNlLnJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnUGFyc2VFcnJvcic7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfQk9EWV9QQVJTRV9GQUlMVVJFJztcbiAgICB9XG59XG5leHBvcnQgY29uc3QgcGFyc2VCb2R5ID0gKHJlc3BvbnNlLCByZXNwb25zZVR5cGUsIHBhcnNlSnNvbiwgZW5jb2RpbmcpID0+IHtcbiAgICBjb25zdCB7IHJhd0JvZHkgfSA9IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkubGVuZ3RoID09PSAwID8gJycgOiBwYXJzZUpzb24ocmF3Qm9keS50b1N0cmluZyhlbmNvZGluZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdidWZmZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoZXJyb3IsIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBgVW5rbm93biBib2R5IHR5cGUgJyR7cmVzcG9uc2VUeXBlfSdgLFxuICAgICAgICBuYW1lOiAnRXJyb3InLFxuICAgIH0sIHJlc3BvbnNlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/timed-out.js":
/*!********************************************************!*\
  !*** ./node_modules/got/dist/source/core/timed-out.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   \"default\": () => (/* binding */ timedOut)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var _utils_unhandle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/unhandle.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\");\n\n\nconst reentry = Symbol('reentry');\nconst noop = () => { };\nclass TimeoutError extends Error {\n    constructor(threshold, event) {\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        Object.defineProperty(this, \"event\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: event\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = 'TimeoutError';\n        this.code = 'ETIMEDOUT';\n    }\n}\nfunction timedOut(request, delays, options) {\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = (0,_utils_unhandle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    const addTimeout = (delay, callback, event) => {\n        const timeout = setTimeout(callback, delay, delay, event);\n        timeout.unref?.();\n        const cancel = () => {\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event) => {\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = () => {\n        for (const cancel of cancelers) {\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once('error', error => {\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */\n        if (request.listenerCount('error') === 0) {\n            throw error;\n        }\n    });\n    if (delays.request !== undefined) {\n        const cancelTimeout = addTimeout(delays.request, timeoutHandler, 'request');\n        once(request, 'response', (response) => {\n            once(response, 'end', cancelTimeout);\n        });\n    }\n    if (delays.socket !== undefined) {\n        const { socket } = delays;\n        const socketTimeoutHandler = () => {\n            timeoutHandler(socket, 'socket');\n        };\n        request.setTimeout(socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(() => {\n            request.removeListener('timeout', socketTimeoutHandler);\n        });\n    }\n    const hasLookup = delays.lookup !== undefined;\n    const hasConnect = delays.connect !== undefined;\n    const hasSecureConnect = delays.secureConnect !== undefined;\n    const hasSend = delays.send !== undefined;\n    if (hasLookup || hasConnect || hasSecureConnect || hasSend) {\n        once(request, 'socket', (socket) => {\n            const { socketPath } = request;\n            /* istanbul ignore next: hard to test */\n            if (socket.connecting) {\n                const hasPath = Boolean(socketPath ?? node_net__WEBPACK_IMPORTED_MODULE_0__.isIP(hostname ?? host ?? '') !== 0);\n                if (hasLookup && !hasPath && socket.address().address === undefined) {\n                    const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, 'lookup');\n                    once(socket, 'lookup', cancelTimeout);\n                }\n                if (hasConnect) {\n                    const timeConnect = () => addTimeout(delays.connect, timeoutHandler, 'connect');\n                    if (hasPath) {\n                        once(socket, 'connect', timeConnect());\n                    }\n                    else {\n                        once(socket, 'lookup', (error) => {\n                            if (error === null) {\n                                once(socket, 'connect', timeConnect());\n                            }\n                        });\n                    }\n                }\n                if (hasSecureConnect && options.protocol === 'https:') {\n                    once(socket, 'connect', () => {\n                        const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, 'secureConnect');\n                        once(socket, 'secureConnect', cancelTimeout);\n                    });\n                }\n            }\n            if (hasSend) {\n                const timeRequest = () => addTimeout(delays.send, timeoutHandler, 'send');\n                /* istanbul ignore next: hard to test */\n                if (socket.connecting) {\n                    once(socket, 'connect', () => {\n                        once(request, 'upload-complete', timeRequest());\n                    });\n                }\n                else {\n                    once(request, 'upload-complete', timeRequest());\n                }\n            }\n        });\n    }\n    if (delays.response !== undefined) {\n        once(request, 'upload-complete', () => {\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, 'response');\n            once(request, 'response', cancelTimeout);\n        });\n    }\n    if (delays.read !== undefined) {\n        once(request, 'response', (response) => {\n            const cancelTimeout = addTimeout(delays.read, timeoutHandler, 'read');\n            once(response, 'end', cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/timed-out.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js":
/*!******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getBodySize)\n/* harmony export */ });\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var _is_form_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-form-data.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\n\n\n\n\nasync function getBodySize(body, headers) {\n    if (headers && 'content-length' in headers) {\n        return Number(headers['content-length']);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(body)) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.byteLength(body);\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__[\"default\"].buffer(body)) {\n        return body.length;\n    }\n    if ((0,_is_form_data_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body)) {\n        return (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(body.getLength.bind(body))();\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUNDO0FBQ0o7QUFDUztBQUM1QjtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQUU7QUFDVixlQUFlLCtDQUFNO0FBQ3JCO0FBQ0EsUUFBUSx3REFBRTtBQUNWO0FBQ0E7QUFDQSxRQUFRLDREQUFVO0FBQ2xCLGVBQWUsb0RBQVM7QUFDeEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcz84Mzg1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ25vZGU6YnVmZmVyJztcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ25vZGU6dXRpbCc7XG5pbXBvcnQgaXMgZnJvbSAnQHNpbmRyZXNvcmh1cy9pcyc7XG5pbXBvcnQgaXNGb3JtRGF0YSBmcm9tICcuL2lzLWZvcm0tZGF0YS5qcyc7XG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnZXRCb2R5U2l6ZShib2R5LCBoZWFkZXJzKSB7XG4gICAgaWYgKGhlYWRlcnMgJiYgJ2NvbnRlbnQtbGVuZ3RoJyBpbiBoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG4gICAgfVxuICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGlzLnN0cmluZyhib2R5KSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSk7XG4gICAgfVxuICAgIGlmIChpcy5idWZmZXIoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoaXNGb3JtRGF0YShib2R5KSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KGJvZHkuZ2V0TGVuZ3RoLmJpbmQoYm9keSkpKCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js":
/*!**********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-client-request.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction isClientRequest(clientRequest) {\n    return clientRequest.writable && !clientRequest.writableEnded;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isClientRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtY2xpZW50LXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLGVBQWUsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RuZm0tYm90Ly4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWNsaWVudC1yZXF1ZXN0LmpzPzU3MGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNDbGllbnRSZXF1ZXN0KGNsaWVudFJlcXVlc3QpIHtcbiAgICByZXR1cm4gY2xpZW50UmVxdWVzdC53cml0YWJsZSAmJiAhY2xpZW50UmVxdWVzdC53cml0YWJsZUVuZGVkO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNDbGllbnRSZXF1ZXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isFormData)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\nfunction isFormData(body) {\n    return _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].nodeStream(body) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].function_(body.getBoundary);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBQ25CO0FBQ2YsV0FBVyx3REFBRSxxQkFBcUIsd0RBQUU7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmZtLWJvdC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9pcy1mb3JtLWRhdGEuanM/MzY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXMgZnJvbSAnQHNpbmRyZXNvcmh1cy9pcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Zvcm1EYXRhKGJvZHkpIHtcbiAgICByZXR1cm4gaXMubm9kZVN0cmVhbShib2R5KSAmJiBpcy5mdW5jdGlvbl8oYm9keS5nZXRCb3VuZGFyeSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-unix-socket-url.js":
/*!***********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-unix-socket-url.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isUnixSocketURL)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction isUnixSocketURL(url) {\n    return url.protocol === 'unix:' || url.hostname === 'unix';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtdW5peC1zb2NrZXQtdXJsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNlO0FBQ2Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RuZm0tYm90Ly4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLXVuaXgtc29ja2V0LXVybC5qcz85MmYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVW5peFNvY2tldFVSTCh1cmwpIHtcbiAgICByZXR1cm4gdXJsLnByb3RvY29sID09PSAndW5peDonIHx8IHVybC5ob3N0bmFtZSA9PT0gJ3VuaXgnO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-unix-socket-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ proxyEvents)\n/* harmony export */ });\nfunction proxyEvents(from, to, events) {\n    const eventFunctions = {};\n    for (const event of events) {\n        const eventFunction = (...args) => {\n            to.emit(event, ...args);\n        };\n        eventFunctions[event] = eventFunction;\n        from.on(event, eventFunction);\n    }\n    return () => {\n        for (const [event, eventFunction] of Object.entries(eventFunctions)) {\n            from.off(event, eventFunction);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmZtLWJvdC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9wcm94eS1ldmVudHMuanM/NWE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm94eUV2ZW50cyhmcm9tLCB0bywgZXZlbnRzKSB7XG4gICAgY29uc3QgZXZlbnRGdW5jdGlvbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBjb25zdCBldmVudEZ1bmN0aW9uID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBldmVudEZ1bmN0aW9uc1tldmVudF0gPSBldmVudEZ1bmN0aW9uO1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBldmVudEZ1bmN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZXZlbnQsIGV2ZW50RnVuY3Rpb25dIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50RnVuY3Rpb25zKSkge1xuICAgICAgICAgICAgZnJvbS5vZmYoZXZlbnQsIGV2ZW50RnVuY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js":
/*!*************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/unhandle.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ unhandle)\n/* harmony export */ });\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nfunction unhandle() {\n    const handlers = [];\n    return {\n        once(origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({ origin, event, fn });\n        },\n        unhandleAll() {\n            for (const handler of handlers) {\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0MsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanM/ZDJiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXaGVuIGF0dGFjaGluZyBsaXN0ZW5lcnMsIGl0J3MgdmVyeSBlYXN5IHRvIGZvcmdldCBhYm91dCB0aGVtLlxuLy8gRXNwZWNpYWxseSBpZiB5b3UgZG8gZXJyb3IgaGFuZGxpbmcgYW5kIHNldCB0aW1lb3V0cy5cbi8vIFNvIGluc3RlYWQgb2YgY2hlY2tpbmcgaWYgaXQncyBwcm9wZXIgdG8gdGhyb3cgYW4gZXJyb3Igb24gZXZlcnkgdGltZW91dCBldmVyLFxuLy8gdXNlIHRoaXMgc2ltcGxlIHRvb2wgd2hpY2ggd2lsbCByZW1vdmUgYWxsIGxpc3RlbmVycyB5b3UgaGF2ZSBhdHRhY2hlZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaGFuZGxlKCkge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25jZShvcmlnaW4sIGV2ZW50LCBmbikge1xuICAgICAgICAgICAgb3JpZ2luLm9uY2UoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBvcmlnaW4sIGV2ZW50LCBmbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5oYW5kbGVBbGwoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgZXZlbnQsIGZuIH0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdmVMaXN0ZW5lcihldmVudCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ urlToOptions)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\nfunction urlToOptions(url) {\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(url.hostname) && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || ''}${url.search || ''}`,\n    };\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || ''}:${url.password || ''}`;\n    }\n    return options;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbkI7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBRTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQixFQUFFLGlCQUFpQjtBQUN2RDtBQUNBLFFBQVEsd0RBQUU7QUFDVjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQ25FO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RuZm0tYm90Ly4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VybC10by1vcHRpb25zLmpzPzdjNzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzIGZyb20gJ0BzaW5kcmVzb3JodXMvaXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXJsVG9PcHRpb25zKHVybCkge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpcy5zdHJpbmcodXJsLmhvc3RuYW1lKSAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgaG9zdDogdXJsLmhvc3QsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIGhyZWY6IHVybC5ocmVmLFxuICAgICAgICBwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWAsXG4gICAgfTtcbiAgICBpZiAoaXMuc3RyaW5nKHVybC5wb3J0KSAmJiB1cmwucG9ydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcih1cmwucG9ydCk7XG4gICAgfVxuICAgIGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG4gICAgICAgIG9wdGlvbnMuYXV0aCA9IGAke3VybC51c2VybmFtZSB8fCAnJ306JHt1cmwucGFzc3dvcmQgfHwgJyd9YDtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WeakableMap)\n/* harmony export */ });\nclass WeakableMap {\n    constructor() {\n        Object.defineProperty(this, \"weakMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"map\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === 'object') {\n            this.weakMap.set(key, value);\n        }\n        else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RuZm0tYm90Ly4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3dlYWthYmxlLW1hcC5qcz9kZDQ4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYWthYmxlTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwid2Vha01hcFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXBcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy53ZWFrTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhpcy53ZWFrTWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2Vha01hcC5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmhhcyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5oYXMoa2V5KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/create.js":
/*!************************************************!*\
  !*** ./node_modules/got/dist/source/create.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var _as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./as-promise/index.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/index.js */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\n/* harmony import */ var _core_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n\n\n\n\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms) => new Promise(resolve => {\n    setTimeout(resolve, ms);\n});\nconst isGotInstance = (value) => _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].function_(value);\nconst aliases = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'head',\n    'delete',\n];\nconst create = (defaults) => {\n    defaults = {\n        options: new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](undefined, undefined, defaults.options),\n        handlers: [...defaults.handlers],\n        mutableDefaults: defaults.mutableDefaults,\n    };\n    Object.defineProperty(defaults, 'mutableDefaults', {\n        enumerable: true,\n        configurable: false,\n        writable: false,\n    });\n    // Got interface\n    const got = ((url, options, defaultOptions = defaults.options) => {\n        const request = new _core_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](url, options, defaultOptions);\n        let promise;\n        const lastHandler = (normalized) => {\n            // Note: `options` is `undefined` when `new Options(...)` fails\n            request.options = normalized;\n            request._noPipe = !normalized.isStream;\n            void request.flush();\n            if (normalized.isStream) {\n                return request;\n            }\n            if (!promise) {\n                promise = (0,_as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(request);\n            }\n            return promise;\n        };\n        let iteration = 0;\n        const iterateHandlers = (newOptions) => {\n            const handler = defaults.handlers[iteration++] ?? lastHandler;\n            const result = handler(newOptions, iterateHandlers);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].promise(result) && !request.options.isStream) {\n                if (!promise) {\n                    promise = (0,_as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(request);\n                }\n                if (result !== promise) {\n                    const descriptors = Object.getOwnPropertyDescriptors(promise);\n                    for (const key in descriptors) {\n                        if (key in result) {\n                            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                            delete descriptors[key];\n                        }\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    Object.defineProperties(result, descriptors);\n                    result.cancel = promise.cancel;\n                }\n            }\n            return result;\n        };\n        return iterateHandlers(request.options);\n    });\n    got.extend = (...instancesOrOptions) => {\n        const options = new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](undefined, undefined, defaults.options);\n        const handlers = [...defaults.handlers];\n        let mutableDefaults;\n        for (const value of instancesOrOptions) {\n            if (isGotInstance(value)) {\n                options.merge(value.defaults.options);\n                handlers.push(...value.defaults.handlers);\n                mutableDefaults = value.defaults.mutableDefaults;\n            }\n            else {\n                options.merge(value);\n                if (value.handlers) {\n                    handlers.push(...value.handlers);\n                }\n                mutableDefaults = value.mutableDefaults;\n            }\n        }\n        return create({\n            options,\n            handlers,\n            mutableDefaults: Boolean(mutableDefaults),\n        });\n    };\n    // Pagination\n    const paginateEach = (async function* (url, options) {\n        let normalizedOptions = new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const { pagination } = normalizedOptions;\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.transform);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.shouldContinue);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.filter);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.paginate);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.countLimit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.requestLimit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.backoff);\n        const allItems = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while (numberOfRequests < pagination.requestLimit) {\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // eslint-disable-next-line no-await-in-loop\n            const response = (await got(undefined, undefined, normalizedOptions));\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(response);\n            const currentItems = [];\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.array(parsed);\n            for (const item of parsed) {\n                if (pagination.filter({ item, currentItems, allItems })) {\n                    if (!pagination.shouldContinue({ item, currentItems, allItems })) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        allItems.push(item);\n                    }\n                    currentItems.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate({\n                response,\n                currentItems,\n                allItems,\n            });\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === response.request.options) {\n                normalizedOptions = response.request.options;\n            }\n            else {\n                normalizedOptions.merge(optionsToMerge);\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.any([_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].urlInstance, _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__[\"default\"].undefined], optionsToMerge.url);\n                if (optionsToMerge.url !== undefined) {\n                    normalizedOptions.prefixUrl = '';\n                    normalizedOptions.url = optionsToMerge.url;\n                }\n            }\n            numberOfRequests++;\n        }\n    });\n    got.paginate = paginateEach;\n    got.paginate.all = (async (url, options) => {\n        const results = [];\n        for await (const item of paginateEach(url, options)) {\n            results.push(item);\n        }\n        return results;\n    });\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = ((url, options) => got(url, { ...options, isStream: true }));\n    // Shortcuts\n    for (const method of aliases) {\n        got[method] = ((url, options) => got(url, { ...options, method }));\n        got.stream[method] = ((url, options) => got(url, { ...options, method, isStream: true }));\n    }\n    if (!defaults.mutableDefaults) {\n        Object.freeze(defaults.handlers);\n        defaults.options.freeze();\n    }\n    Object.defineProperty(got, 'defaults', {\n        value: defaults,\n        writable: false,\n        configurable: false,\n        enumerable: true,\n    });\n    return got;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (create);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/index.js":
/*!***********************************************!*\
  !*** ./node_modules/got/dist/source/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.AbortError),\n/* harmony export */   CacheError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.CacheError),\n/* harmony export */   CancelError: () => (/* reexport safe */ _as_promise_types_js__WEBPACK_IMPORTED_MODULE_5__.CancelError),\n/* harmony export */   HTTPError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.HTTPError),\n/* harmony export */   MaxRedirectsError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.MaxRedirectsError),\n/* harmony export */   Options: () => (/* reexport safe */ _core_options_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   ParseError: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.ParseError),\n/* harmony export */   ReadError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.ReadError),\n/* harmony export */   RequestError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.RequestError),\n/* harmony export */   RetryError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.RetryError),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.TimeoutError),\n/* harmony export */   UploadError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.UploadError),\n/* harmony export */   calculateRetryDelay: () => (/* reexport safe */ _core_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   create: () => (/* reexport safe */ _create_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   got: () => (/* binding */ got),\n/* harmony export */   isResponseOk: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.isResponseOk),\n/* harmony export */   parseBody: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.parseBody),\n/* harmony export */   parseLinkHeader: () => (/* reexport safe */ _core_parse_link_header_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create.js */ \"(rsc)/./node_modules/got/dist/source/create.js\");\n/* harmony import */ var _core_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n/* harmony import */ var _core_response_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n/* harmony import */ var _core_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/calculate-retry-delay.js */ \"(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\");\n/* harmony import */ var _as_promise_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./as-promise/types.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\n/* harmony import */ var _core_parse_link_header_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/parse-link-header.js */ \"(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\");\n\n\nconst defaults = {\n    options: new _core_options_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](),\n    handlers: [],\n    mutableDefaults: false,\n};\nconst got = (0,_create_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(defaults);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (got);\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ087QUFDeEM7QUFDQSxpQkFBaUIsd0RBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBTTtBQUNsQixpRUFBZSxHQUFHLEVBQUM7QUFDSjtBQUN3QztBQUNyQjtBQUNDO0FBQ0g7QUFDQztBQUNnRDtBQUMzQztBQUNYO0FBQ3FCO0FBQ3lCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzP2RmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZSBmcm9tICcuL2NyZWF0ZS5qcyc7XG5pbXBvcnQgT3B0aW9ucyBmcm9tICcuL2NvcmUvb3B0aW9ucy5qcyc7XG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgICBvcHRpb25zOiBuZXcgT3B0aW9ucygpLFxuICAgIGhhbmRsZXJzOiBbXSxcbiAgICBtdXRhYmxlRGVmYXVsdHM6IGZhbHNlLFxufTtcbmNvbnN0IGdvdCA9IGNyZWF0ZShkZWZhdWx0cyk7XG5leHBvcnQgZGVmYXVsdCBnb3Q7XG5leHBvcnQgeyBnb3QgfTtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgT3B0aW9ucyB9IGZyb20gJy4vY29yZS9vcHRpb25zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9vcHRpb25zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZXNwb25zZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvcmUvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2Vycm9ycy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhbGN1bGF0ZVJldHJ5RGVsYXkgfSBmcm9tICcuL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYXMtcHJvbWlzZS90eXBlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZUxpbmtIZWFkZXIgfSBmcm9tICcuL2NvcmUvcGFyc2UtbGluay1oZWFkZXIuanMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/index.js\n");

/***/ })

};
;