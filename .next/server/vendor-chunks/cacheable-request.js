"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cacheable-request";
exports.ids = ["vendor-chunks/cacheable-request"];
exports.modules = {

/***/ "(rsc)/./node_modules/cacheable-request/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/cacheable-request/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_9__.CacheError),\n/* harmony export */   RequestError: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_9__.RequestError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   onResponse: () => (/* binding */ onResponse)\n/* harmony export */ });\n/* harmony import */ var node_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:events */ \"node:events\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var normalize_url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! normalize-url */ \"(rsc)/./node_modules/normalize-url/index.js\");\n/* harmony import */ var get_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/get-stream/index.js\");\n/* harmony import */ var http_cache_semantics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! http-cache-semantics */ \"(rsc)/./node_modules/http-cache-semantics/index.js\");\n/* harmony import */ var responselike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! responselike */ \"(rsc)/./node_modules/responselike/index.js\");\n/* harmony import */ var keyv__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! keyv */ \"(rsc)/./node_modules/keyv/src/index.js\");\n/* harmony import */ var mimic_response__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! mimic-response */ \"(rsc)/./node_modules/mimic-response/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/cacheable-request/dist/types.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass CacheableRequest {\n    constructor(cacheRequest, cacheAdapter) {\n        this.hooks = new Map();\n        this.request = () => (options, cb) => {\n            let url;\n            if (typeof options === 'string') {\n                url = normalizeUrlObject(node_url__WEBPACK_IMPORTED_MODULE_1__.parse(options));\n                options = {};\n            }\n            else if (options instanceof node_url__WEBPACK_IMPORTED_MODULE_1__.URL) {\n                url = normalizeUrlObject(node_url__WEBPACK_IMPORTED_MODULE_1__.parse(options.toString()));\n                options = {};\n            }\n            else {\n                const [pathname, ...searchParts] = (options.path ?? '').split('?');\n                const search = searchParts.length > 0\n                    ? `?${searchParts.join('?')}`\n                    : '';\n                url = normalizeUrlObject({ ...options, pathname, search });\n            }\n            options = {\n                headers: {},\n                method: 'GET',\n                cache: true,\n                strictTtl: false,\n                automaticFailover: false,\n                ...options,\n                ...urlObjectToRequestOptions(url),\n            };\n            options.headers = Object.fromEntries(entries(options.headers).map(([key, value]) => [key.toLowerCase(), value]));\n            const ee = new node_events__WEBPACK_IMPORTED_MODULE_0__();\n            const normalizedUrlString = (0,normalize_url__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(node_url__WEBPACK_IMPORTED_MODULE_1__.format(url), {\n                stripWWW: false,\n                removeTrailingSlash: false,\n                stripAuthentication: false,\n            });\n            let key = `${options.method}:${normalizedUrlString}`;\n            // POST, PATCH, and PUT requests may be cached, depending on the response\n            // cache-control headers. As a result, the body of the request should be\n            // added to the cache key in order to avoid collisions.\n            if (options.body && options.method !== undefined && ['POST', 'PATCH', 'PUT'].includes(options.method)) {\n                if (options.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n                    // Streamed bodies should completely skip the cache because they may\n                    // or may not be hashable and in either case the stream would need to\n                    // close before the cache key could be generated.\n                    options.cache = false;\n                }\n                else {\n                    key += `:${node_crypto__WEBPACK_IMPORTED_MODULE_2__.createHash('md5').update(options.body).digest('hex')}`;\n                }\n            }\n            let revalidate = false;\n            let madeRequest = false;\n            const makeRequest = (options_) => {\n                madeRequest = true;\n                let requestErrored = false;\n                let requestErrorCallback = () => { };\n                const requestErrorPromise = new Promise(resolve => {\n                    requestErrorCallback = () => {\n                        if (!requestErrored) {\n                            requestErrored = true;\n                            resolve();\n                        }\n                    };\n                });\n                const handler = async (response) => {\n                    if (revalidate) {\n                        response.status = response.statusCode;\n                        const revalidatedPolicy = http_cache_semantics__WEBPACK_IMPORTED_MODULE_5__.fromObject(revalidate.cachePolicy).revalidatedPolicy(options_, response);\n                        if (!revalidatedPolicy.modified) {\n                            response.resume();\n                            await new Promise(resolve => {\n                                // Skipping 'error' handler cause 'error' event should't be emitted for 304 response\n                                response\n                                    .once('end', resolve);\n                            });\n                            const headers = convertHeaders(revalidatedPolicy.policy.responseHeaders());\n                            response = new responselike__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({ statusCode: revalidate.statusCode, headers, body: revalidate.body, url: revalidate.url });\n                            response.cachePolicy = revalidatedPolicy.policy;\n                            response.fromCache = true;\n                        }\n                    }\n                    if (!response.fromCache) {\n                        response.cachePolicy = new http_cache_semantics__WEBPACK_IMPORTED_MODULE_5__(options_, response, options_);\n                        response.fromCache = false;\n                    }\n                    let clonedResponse;\n                    if (options_.cache && response.cachePolicy.storable()) {\n                        clonedResponse = cloneResponse(response);\n                        (async () => {\n                            try {\n                                const bodyPromise = get_stream__WEBPACK_IMPORTED_MODULE_4__.buffer(response);\n                                await Promise.race([\n                                    requestErrorPromise,\n                                    new Promise(resolve => response.once('end', resolve)),\n                                    new Promise(resolve => response.once('close', resolve)), // eslint-disable-line no-promise-executor-return\n                                ]);\n                                const body = await bodyPromise;\n                                let value = {\n                                    url: response.url,\n                                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,\n                                    body,\n                                    cachePolicy: response.cachePolicy.toObject(),\n                                };\n                                let ttl = options_.strictTtl ? response.cachePolicy.timeToLive() : undefined;\n                                if (options_.maxTtl) {\n                                    ttl = ttl ? Math.min(ttl, options_.maxTtl) : options_.maxTtl;\n                                }\n                                if (this.hooks.size > 0) {\n                                    /* eslint-disable no-await-in-loop */\n                                    for (const key_ of this.hooks.keys()) {\n                                        value = await this.runHook(key_, value, response);\n                                    }\n                                    /* eslint-enable no-await-in-loop */\n                                }\n                                await this.cache.set(key, value, ttl);\n                            }\n                            catch (error) {\n                                ee.emit('error', new _types_js__WEBPACK_IMPORTED_MODULE_9__.CacheError(error));\n                            }\n                        })();\n                    }\n                    else if (options_.cache && revalidate) {\n                        (async () => {\n                            try {\n                                await this.cache.delete(key);\n                            }\n                            catch (error) {\n                                ee.emit('error', new _types_js__WEBPACK_IMPORTED_MODULE_9__.CacheError(error));\n                            }\n                        })();\n                    }\n                    ee.emit('response', clonedResponse ?? response);\n                    if (typeof cb === 'function') {\n                        cb(clonedResponse ?? response);\n                    }\n                };\n                try {\n                    const request_ = this.cacheRequest(options_, handler);\n                    request_.once('error', requestErrorCallback);\n                    request_.once('abort', requestErrorCallback);\n                    request_.once('destroy', requestErrorCallback);\n                    ee.emit('request', request_);\n                }\n                catch (error) {\n                    ee.emit('error', new _types_js__WEBPACK_IMPORTED_MODULE_9__.RequestError(error));\n                }\n            };\n            (async () => {\n                const get = async (options_) => {\n                    await Promise.resolve();\n                    const cacheEntry = options_.cache ? await this.cache.get(key) : undefined;\n                    if (cacheEntry === undefined && !options_.forceRefresh) {\n                        makeRequest(options_);\n                        return;\n                    }\n                    const policy = http_cache_semantics__WEBPACK_IMPORTED_MODULE_5__.fromObject(cacheEntry.cachePolicy);\n                    if (policy.satisfiesWithoutRevalidation(options_) && !options_.forceRefresh) {\n                        const headers = convertHeaders(policy.responseHeaders());\n                        const response = new responselike__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({ statusCode: cacheEntry.statusCode, headers, body: cacheEntry.body, url: cacheEntry.url });\n                        response.cachePolicy = policy;\n                        response.fromCache = true;\n                        ee.emit('response', response);\n                        if (typeof cb === 'function') {\n                            cb(response);\n                        }\n                    }\n                    else if (policy.satisfiesWithoutRevalidation(options_) && Date.now() >= policy.timeToLive() && options_.forceRefresh) {\n                        await this.cache.delete(key);\n                        options_.headers = policy.revalidationHeaders(options_);\n                        makeRequest(options_);\n                    }\n                    else {\n                        revalidate = cacheEntry;\n                        options_.headers = policy.revalidationHeaders(options_);\n                        makeRequest(options_);\n                    }\n                };\n                const errorHandler = (error) => ee.emit('error', new _types_js__WEBPACK_IMPORTED_MODULE_9__.CacheError(error));\n                if (this.cache instanceof keyv__WEBPACK_IMPORTED_MODULE_7__) {\n                    const cachek = this.cache;\n                    cachek.once('error', errorHandler);\n                    ee.on('error', () => cachek.removeListener('error', errorHandler));\n                    ee.on('response', () => cachek.removeListener('error', errorHandler));\n                }\n                try {\n                    await get(options);\n                }\n                catch (error) {\n                    if (options.automaticFailover && !madeRequest) {\n                        makeRequest(options);\n                    }\n                    ee.emit('error', new _types_js__WEBPACK_IMPORTED_MODULE_9__.CacheError(error));\n                }\n            })();\n            return ee;\n        };\n        this.addHook = (name, fn) => {\n            if (!this.hooks.has(name)) {\n                this.hooks.set(name, fn);\n            }\n        };\n        this.removeHook = (name) => this.hooks.delete(name);\n        this.getHook = (name) => this.hooks.get(name);\n        this.runHook = async (name, ...args) => this.hooks.get(name)?.(...args);\n        if (cacheAdapter instanceof keyv__WEBPACK_IMPORTED_MODULE_7__) {\n            this.cache = cacheAdapter;\n        }\n        else if (typeof cacheAdapter === 'string') {\n            this.cache = new keyv__WEBPACK_IMPORTED_MODULE_7__({\n                uri: cacheAdapter,\n                namespace: 'cacheable-request',\n            });\n        }\n        else {\n            this.cache = new keyv__WEBPACK_IMPORTED_MODULE_7__({\n                store: cacheAdapter,\n                namespace: 'cacheable-request',\n            });\n        }\n        this.request = this.request.bind(this);\n        this.cacheRequest = cacheRequest;\n    }\n}\nconst entries = Object.entries;\nconst cloneResponse = (response) => {\n    const clone = new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough({ autoDestroy: false });\n    (0,mimic_response__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(response, clone);\n    return response.pipe(clone);\n};\nconst urlObjectToRequestOptions = (url) => {\n    const options = { ...url };\n    options.path = `${url.pathname || '/'}${url.search || ''}`;\n    delete options.pathname;\n    delete options.search;\n    return options;\n};\nconst normalizeUrlObject = (url) => \n// If url was parsed by url.parse or new URL:\n// - hostname will be set\n// - host will be hostname[:port]\n// - port will be set if it was explicit in the parsed string\n// Otherwise, url was from request options:\n// - hostname or host may be set\n// - host shall not have port encoded\n({\n    protocol: url.protocol,\n    auth: url.auth,\n    hostname: url.hostname || url.host || 'localhost',\n    port: url.port,\n    pathname: url.pathname,\n    search: url.search,\n});\nconst convertHeaders = (headers) => {\n    const result = [];\n    for (const name of Object.keys(headers)) {\n        result[name.toLowerCase()] = headers[name];\n    }\n    return result;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CacheableRequest);\n\nconst onResponse = 'onResponse';\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/dist/types.js":
/*!******************************************************!*\
  !*** ./node_modules/cacheable-request/dist/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   RequestError: () => (/* binding */ RequestError)\n/* harmony export */ });\n// Type definitions for cacheable-request 6.0\n// Project: https://github.com/lukechilds/cacheable-request#readme\n// Definitions by: BendingBender <https://github.com/BendingBender>\n//                 Paul Melnikow <https://github.com/paulmelnikow>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\nclass RequestError extends Error {\n    constructor(error) {\n        super(error.message);\n        Object.assign(this, error);\n    }\n}\nclass CacheError extends Error {\n    constructor(error) {\n        super(error.message);\n        Object.assign(this, error);\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3QvZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG5mbS1ib3QvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3QvZGlzdC90eXBlcy5qcz9jMzQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFR5cGUgZGVmaW5pdGlvbnMgZm9yIGNhY2hlYWJsZS1yZXF1ZXN0IDYuMFxuLy8gUHJvamVjdDogaHR0cHM6Ly9naXRodWIuY29tL2x1a2VjaGlsZHMvY2FjaGVhYmxlLXJlcXVlc3QjcmVhZG1lXG4vLyBEZWZpbml0aW9ucyBieTogQmVuZGluZ0JlbmRlciA8aHR0cHM6Ly9naXRodWIuY29tL0JlbmRpbmdCZW5kZXI+XG4vLyAgICAgICAgICAgICAgICAgUGF1bCBNZWxuaWtvdyA8aHR0cHM6Ly9naXRodWIuY29tL3BhdWxtZWxuaWtvdz5cbi8vIERlZmluaXRpb25zOiBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZFxuLy8gVHlwZVNjcmlwdCBWZXJzaW9uOiAyLjNcbmV4cG9ydCBjbGFzcyBSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgZXJyb3IpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDYWNoZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGVycm9yKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/dist/types.js\n");

/***/ })

};
;